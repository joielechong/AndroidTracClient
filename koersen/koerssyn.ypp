%token OPENBLOCK
%token CLOSEBLOCK

%token STRING
%token FLOAT

%token NORMAAL
%token OPTIE_FL
%token OPTIE_REL_FL
%token OPTIE_EUR
%token OPTIE_REL_EUR
%token LAATSTE

%union {
  int i;
  long l;
  char *s;
  double f;
}

%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "koersen.h"

struct tabel tabel[MAXTABEL];

int tabcnt;

int yylex(void);

void yyerror (char *s) {
  fprintf (stderr, "%s\n", s);
}

#define min(a,b) ((a) < (b) ? (a) : (b))

static char *stringcpy(const char *from,int lengte)
{
  char *c,*to;

  if (from==NULL)
    return NULL;
  else {
    if (lengte == 0) {
      to = strdup(from+1);
      c = strchr(to,'"');
      if (c != NULL) *c = 0;
    }
    else {
      to = (char *)malloc(lengte+1);
      if (to != NULL) {
	memset(to,' ',lengte);
	to[lengte]=0;
	memcpy(to,from+1,min((int)strlen(from)-2,lengte));
      }
    }
  }
  return to;
}

%}

%%

program       :  OPENBLOCK {tabcnt = 0; } declarations CLOSEBLOCK ';' 
              ;


declarations  :  declaration
              |  declaration ',' declarations
              ;

declaration   :  OPENBLOCK 
                 STRING { tabel[tabcnt].tt_nam=stringcpy($<s>2,10); }
                 ',' STRING { tabel[tabcnt].db_nam=stringcpy($<s>5,0); }
                 ',' FLOAT { tabel[tabcnt].koers=$<f>8; }
                 ',' decltype CLOSEBLOCK { tabcnt++;}
              ;

decltype      :  NORMAAL { tabel[tabcnt].type=normaal; }
              |  OPTIE_FL ',' FLOAT { tabel[tabcnt].type=optie_fl; tabel[tabcnt].conv_koers = $<f>3; }
              |  OPTIE_REL_FL ',' FLOAT { tabel[tabcnt].type=optie_rel_fl; tabel[tabcnt].conv_koers = $<f>3; }
              |  OPTIE_EUR ',' FLOAT { tabel[tabcnt].type=optie_eur; tabel[tabcnt].conv_koers = $<f>3; }
              |  OPTIE_REL_EUR ',' FLOAT { tabel[tabcnt].type=optie_rel_eur; tabel[tabcnt].conv_koers = $<f>3; }
              |  LAATSTE { tabel[tabcnt].type=laatste; }
              ;


%%
