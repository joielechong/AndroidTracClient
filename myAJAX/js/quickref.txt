/**
*
* myAJAX:  My AJAX implemetation ( http://myajax.sourceforge.net/ )
* Copyright (c) 2006 - 2007, Raul IONESCU <raul.ionescu@yahoo.com>, Bucharest, ROMANIA
*
* Special Thanks:     
* Sebastian IACOB  <isebastian07@yahoo.com>,    Bucharest, ROMANIA
* Sebastian VASILE <sebastianvasile@yahoo.com>, Timisoara, ROMANIA
* Tudor BARBU      <tudor@it-base.ro>,          Bucharest, ROMANIA
*
* @package      myAJAX
* @copyright 	Copyright (c) 2006 - 2007, Raul IONESCU.
* @disclaimer   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
*               INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
*               FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
*               IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES 
*               OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*               OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.   
* @author 	Raul IONESCU <raul.ionescu@yahoo.com>
* @license      The MIT License. ( http://www.opensource.org/licenses/mit-license.php )
* @version 	6.1.0
* @category 	Javascript functions for AJAX.
* @access 	public
* @notes        Uses some modified functions from jBookmarker project made by Tudor BARBU.
*               (http://www.it-base.ro/blog/posts/javascript/jbookmarker-create-bookmarkable-ajax-apps.html)
* @notes        Uses some slightly modified functions from http://www.dustindiaz.com/top-ten-javascript/ and 
*               http://www.webtoolkit.info/ 
*
* REDISTRIBUTIONS OF FILES MUST RETAIN THE ABOVE COPYRIGHT NOTICE.
*/

/////////////////////////////////////////////////////////////////////////
myAJAX description
/////////////////////////////////////////////////////////////////////////
   myAJAX is intended to be a small javascript object (associated with a few other utility 
functions and objects) and made for ease. myAJAX uses internally XMLHttpRequest object or, 
in case of this is not possible, an IFRAME based method will be automatically used instead. 

NOTE: Any JavaScripts code contained between `<script type="text/javascript">` and `</script>`,
from TEXT response will be automatically executed. In case of an error, no Error is thrown.

NOTE: myAJAX was tested on following browsers:
        Mozilla Firefox 2
        SeaMonkey 1
        K-Meleon 1
        Epiphany 2
        Galeon 2
        Netscape 8 and 7
        Opera 9 and 8
        Internet Explorer 7 and 6



/////////////////////////////////////////////////////////////////////////
Object myAJAX.XMLHttp
/////////////////////////////////////////////////////////////////////////

   PARAMETERS
-------------------------------------------------------------------------
none
   
   PROPERTIES
-------------------------------------------------------------------------
requestObject               = returns XMLHttp / Microsoft.XmlHttp object

   METHODS
-------------------------------------------------------------------------
none
/////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////
Object myAJAX - XMLHttpObject/iFrame based solution
/////////////////////////////////////////////////////////////////////////

   PARAMETERS
-------------------------------------------------------------------------
url                         = page's URL
urlParameters               = page's parameters (can be a string (containing URL parameters or an `id` of a form or form element) or an object (pointing to a form or to a single form element))
method                      = `HEAD`, `GET` or `POST` with a default value of `GET`
refreshInterval             = sets the execution of AJAX request periodically for values not zero; it is expressed in msec.
onStartFunction             = function called before the request
onProgressFunction          = function called on interactive mode - onProgressFunction(new String(responseText), new Number(myContentLength))
onReadyFunction             = function called when server's response is myAJAX.constants.HTTP.serverStatus.OK - onReadyFunction(Array(ResponseHeaders) | new myAJAX.myXML() | new String(responseText))
onErrorFunction             = function called when server's response is other than myAJAX.constants.HTTP.serverStatus.OK - onErrorFunction(new String(statusText),new Number(status))
InnerHtmlId                 = is the ID of an html element who will be populated with the TEXT response
ajaxMethod                  = `XMLHttp` or `iFrame`, with a default value of `undefined` or ``(empty string) wich means "auto detection"
forceNoCache                = force to not use broser's cache for AJAX requests (default is true)
enableMultiplyingFileInputs = enable multiplying file inputs on `change` event for multiple file uploads.
enableStyleEffects          = enable style effects applied on form's elements (default is false)

OR

url                         = an object
   
   PROPERTIES
-------------------------------------------------------------------------
ID                          = returns current object's ID
(the rest of the object's properties are the same with `PARAMETERS`)

   METHODS
-------------------------------------------------------------------------
namedInstance(instanceName) = create and/or just return specified instance name
sendRequest()               = performs AJAX request
abortRequest()              = aborts AJAX request
/////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////
Object myAJAX.myXML
/////////////////////////////////////////////////////////////////////////

   PARAMETERS
-------------------------------------------------------------------------
xmlDoc                                  = XML object returned by responseXML
   
   PROPERTIES
-------------------------------------------------------------------------
 same as PARAMETRS   

   METHODS
-------------------------------------------------------------------------
rootNodeName                                                            = returns root node's name of the XML document
rootNodeObject                                                          = returns root node object of the XML document
nodeObject(nodeName, index=0 | nodeObj)                                 = returns node object of the XML document
nodeValue(nodeName,index=0 | nodeObj)                                   = returns node's value
nodeAttribute(nodeName, index, attribute | nodeObj, attribute)          = returns node's attribute
nodesByTagName(tagName)                                                 = returns a list of nodes with specified tag name
/////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////
Object Cookie
/////////////////////////////////////////////////////////////////////////

   PARAMETERS
-------------------------------------------------------------------------
name  = cookie's name
   
   PROPERTIES
-------------------------------------------------------------------------
none

   METHODS
-------------------------------------------------------------------------
set(value, days) = sets cookie's value
get()            = get cookie's value
remove()         = delete cookie
/////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////
Other functions
/////////////////////////////////////////////////////////////////////////
$()                                                    
$baseName([string])                                     = returns base name from `string` path
$captureEvent(event, hFunction[,useCapture, element])   = call function `hFunction` on every `event` for specified `element`
$copyStyle(destinationNode[, sourceNode])               = apply style from `sourceNode` to `destinationNode`
$escapeHTML([string])                                   = returns HTML escaped string
$extractScripts([string])                               = returns all javascript code from `string`
$getKey(key[, string])                                  = returns key's value
$getKeys([string])                                      = returns all key's names
$getMousePosition(event)                                = returns mouse position
$getPosition([node])                                    = returns `node`'s coordinates for top left margin
$getStyle([node])                                       = returns current style for specified `node`
$hide([node])                                           = set DOM node's style visibility to `hidden`
$indexOf(element[, array])                              = returns index of `element` from `array` or false.
$inheritFromObject(sourceObject[, destinationObject])   = inherit all properties and methods from `sourceObject` into `destinationObject`
$isForm([form ID | form object])                        = returns `true` if is a form or an ID of a form
$isFormWithFileInput([form ID | form object])           = returns `true` if the form contains file inputs
$nodeStyle([node])                                      = returns DOM node's style
$object2QueryString([variable])                         = parse `variable` and returns an unescaped query string.
$releaseEvent(event, hFunction[, useCapture, element])  = this is the reverse function of `$captureEvent`
$remove([node])                                         = remove specified node
$removeKey(key[, string])                               = remove specified key
$replaceAll(searchFor,replaceWith [,searchedString])    = replace all occurences of `serchFor` with `replaceWith`
$reset([node])                                          = reset `node`
$scroll(x [,y])                                         = scroll document to specified coodinates: `x` and `y` or to the position of element `x`
$setKey(key, value[, string])                           = add the specified key name with specified value
$setOpacity(opacityValue[, node])                       = set opacity's `node`
$setProperty(propertyName, propertyValue[, object])     = adds specified `propertyName` with `propertyValue` value to the `object`
$show([node])                                           = set DOM node's style visibility to `visible`
$stripCRLF([string])                                    = removes all CRLF occurences from `string`
$stripScripts([string])                                 = strip all javascript code from `string`
$stripTags([string])                                    = removes all HTML tags from `string`
$toggleDisplay([node])                                  = toggle `style.display` property for specified `node`
$toggleVisibility([node])                               = toggle `style.visibility` property for specified `node`
$trim([string])					        = removes whitespace characters from the beginning and end of the `string`
$unescapeHTML([string])                                 = returns unescaped HTML string
$updateHTML(html[, node])                               = updates `node`'s innerHTML with `html` 
$updateText(text[, node])                               = updates `node`'s innerText or textContent, with `text` 
$urlEncode([urlParameters])                             = encode URL parameters
$urlDecode([urlParameters])                             = decode URL parameters


