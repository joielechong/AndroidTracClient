BEGIN TRANSACTION;

DROP VIEW counts;
DROP VIEW admintmp;
DROP VIEW admin1;
DROP VIEW admin2;
DROP VIEW usable_way;
DROP VIEW nb;
DROP VIEW incomplete_relations;

DROP TABLE admin;
DROP TABLE tag;
DROP TABLE nd;
DROP TABLE member;
DROP TABLE neighbor;
DROP TABLE bound;
DROP TABLE relation;
DROP TABLE way;
DROP TABLE node;

CREATE TABLE node (id long primary key,lat double not null,lon double not null, version integer not null,processed boolean default 0,x integer DEFAULT NULL,y integer DEFAULT NULL);
CREATE TABLE tag (id long not null,type varchar not null,k varchar not null,v varchar not null, primary key (id,type,k));
CREATE TABLE way (id long primary key,version integer not null,processed boolean default 0);
CREATE TABLE relation (id long primary key,version integer not null,processed boolean default 0);
CREATE TABLE bound (minlat double not null,maxlat double not null,minlon double not null, maxlon double not null,processed boolean default 0,unique(minlat,maxlat,minlon,maxlon));

CREATE TABLE nd (id long not null,seq integer not null,ref long not null,primary key (id,seq));
CREATE TABLE member (id long not null,seq integer not null,type varchar not null,ref long not null, role varchar, primary key (id,seq));
CREATE TABLE neighbor (id1 long not null,id2 long not null, way long not null,distance double default NULL,unique(id1,id2,way));
CREATE TABLE admin (id long primary key,name varchar, level integer,minlat double,maxlat double,minlon double,maxlon double);
CREATE TABLE adressen(id long,type varchar,country varchar,city varchar,street varchar,housenumber varchar,postcode varchar);

CREATE TRIGGER nodetag BEFORE DELETE ON node FOR EACH ROW  BEGIN DELETE FROM tag where id=old.id and type='node'; DELETE FROM nd WHERE ref=old.id; DELETE FROM member where ref=old.id; DELETE FROM neighbor WHERE id1=old.id OR id2=old.id;END;
CREATE TRIGGER waytag BEFORE DELETE ON way FOR EACH ROW  BEGIN DELETE FROM tag where id=old.id and type='way'; DELETE FROM member where ref =old.id; DELETE FROM nd WHERE id=old.id; DELETE FROM neighbor WHERE way=old.id; END;
CREATE TRIGGER reltag BEFORE DELETE ON relation FOR EACH ROW  BEGIN DELETE FROM tag where id=old.id and type='relation'; DELETE FROM admin WHERE id=old.id; DELETE FROM member WHERE id=old.id; END;

CREATE VIEW bucket as SELECT x,y,id as node FROM node WHERE NOT (x IS NULL OR y IS NULL);
CREATE VIEW nodetag AS SELECT * FROM tag WHERE type='node';
CREATE VIEW waytag AS SELECT * FROM tag WHERE type='way';
CREATE VIEW relationtag AS SELECT * FROM tag WHERE type='relation';
CREATE VIEW usable_way as select way.* from way,waytag as tag where way.id=tag.id and (k='highway' or (k='route' and v='ferry'));

CREATE VIEW admin1 as select relation.id, (select t1.v from relationtag as t1 where t1.id=relation.id and t1.k='name') as name, (select t2.v from relationtag as t2 where t2.id=tag.id and t2.k='admin_level') as level from relation,relationtag as tag where relation.id=tag.id and tag.k='type' and tag.v in ('boundary','multipolygon') and not name is null and not level is null;
CREATE VIEW admin2 as select member.id,min(lat) as minlat,max(lat) as maxlat,min(lon) as minlon, max(lon) as maxlon from member,nd,node where member.type='way' and member.ref=nd.id and nd.ref=node.id group by member.id;
CREATE VIEW admintmp as select admin1.*,minlat,maxlat,minlon,maxlon from admin1,admin2 where admin1.id=admin2.id;

CREATE VIEW nb as select nd.id as way,ref as id1,(select nd1.ref from nd as nd1 where nd.id=nd1.id and nd1.seq=(nd.seq+1)) as id2 from nd,usable_way as u where nd.id=u.id and not u.processed and not id2 is null;
CREATE VIEW counts as SELECT (select max(rowid) from node) as nodes,(select max(rowid) from way) as ways,(select max(rowid) from relation) as relations,(select max(rowid) from bound) as bounds, (select max(rowid) from tag) as tags, (select max(rowid) from nd) as nds, (select max(rowid) from member) as mems;
CREATE VIEW incomplete_relations AS SELECT distinct relation.id FROM relation,relationtag as tag,member WHERE  relation.processed and relation.id=tag.id and tag.k='type' and tag.v in ('multiploygon','boundary')  and relation.id=member.id AND ((member.type='relation' AND  not ref in (select id from relation)) or (member.type='way' and not ref in (select id from way)) or (member.type='node' and not ref in (select id from node)));

CREATE INDEX nd_ref ON nd(ref);
CREATE INDEX ndx ON node(x);
CREATE INDEX ndy ON node(y);
CREATE INDEX mb1 ON member(ref);
CREATE INDEX nb1 ON neighbor(id1);
CREATE INDEX nb2 ON neighbor(id2);
CREATE INDEX b1 ON bound(minlat);
CREATE INDEX b2 ON bound(maxlat);
CREATE INDEX b3 ON bound(minlon);
CREATE INDEX b4 ON bound(maxlon);
CREATE INDEX maxlat ON admin(maxlat);
CREATE INDEX minlat ON admin(minlat);
CREATE INDEX minlon ON admin(minlon);
CREATE INDEX maxlon ON admin(maxlon);

COMMIT;
PRAGMA default_cache_size=5000;
PRAGMA synchronous=off;
PRAGMA temp_store=2;
