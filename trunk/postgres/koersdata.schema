--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: koersid; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE koersid (
    id integer,
    datum date,
    volume integer,
    open double precision,
    hoog double precision,
    laag double precision,
    slot double precision
);


ALTER TABLE public.koersid OWNER TO mfvl;

--
-- Name: rekening; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE rekening (
    naam character varying NOT NULL,
    id integer NOT NULL,
    soort character(1),
    datum date DEFAULT date("timestamp"('now'::text)),
    private boolean DEFAULT false
);


ALTER TABLE public.rekening OWNER TO mfvl;

--
-- Name: koers; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW koers AS
    SELECT r.naam, k.datum, k.volume, k.open, k.hoog, k.laag, k.slot FROM koersid k, rekening r WHERE (k.id = r.id);


ALTER TABLE public.koers OWNER TO mfvl;

--
-- Name: mergekoersen(character varying, character varying); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION mergekoersen(arg1 character varying, arg2 character varying) RETURNS SETOF koers
    AS $$declare
	id1 integer;
	id2 integer;
	rij koers%ROWTYPE;
begin
	select id into id1 from rektrans where naam=arg1;
	if not found then
		raise notice '% does not exist',arg1;
		return;
	end if;

	select id into id2 from rektrans where naam=arg2;
	if not found then
		insert into rekening (naam) values (arg2);
		select id into id2 from rektrans where naam=arg2;
	end if;

	if (id1 = id2) then
		raise notice '% and % are the same',arg1,arg2;
		return;
	end if;

	update koersid set id=id2 where id=id1 and not datum in (select datum from koersid where id=id2);
	update koersid as k set laag=x.laag from koers as x where k.id=id2 and k.datum=x.datum and x.naam=arg1 and k.laag>x.laag;
	update koersid as k set hoog=x.hoog from koers as x where k.id=id2 and k.datum=x.datum and x.naam=arg1 and k.hoog>x.hoog;
	update koersid as k set volume=x.volume from koers as x where k.id=id2 and k.datum=x.datum and x.naam=arg1 and k.volume>x.volume;
	for rij in SELECT * from koers where naam=arg1 LOOP
		return next rij;
	end loop;
	insert into vertaal values (arg1,arg2);
	update vertaal set naam2=arg2 where naam2=arg1;
	delete from rekening where naam=arg1;
	return;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.mergekoersen(arg1 character varying, arg2 character varying) OWNER TO mfvl;

--
-- Name: nieuwkoersinfo(character varying, character varying, integer, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION nieuwkoersinfo(name character varying, datstr character varying, vol integer, open double precision, high double precision, low double precision, "last" double precision) RETURNS SETOF koers
    AS $$
declare
  koersrij koers%ROWTYPE;
  transrij rektrans%ROWTYPE;
  rawrij koersid%ROWTYPE;
begin

  koersrij.naam:=name;
  koersrij.datum:=datstr;
  koersrij.volume:=vol;
  koersrij.hoog:=high;
  koersrij.laag=low;
  koersrij.slot:="last";
  koersrij."open":="open";

  return next koersrij;

  select * into transrij from rektrans where naam=name;
  if not found then
    INSERT INTO rekening (naam) VALUES (name);
    select * into transrij from rektrans where naam=name;
  end if;

  select * into rawrij from koersid where id=transrij.id and datum=date(datstr);
  if not found then
      INSERT INTO koers (naam,datum,volume,open,hoog,laag,slot) VALUES(name,date(datstr),vol,"open",high,low,"last");
  else
    koersrij."open" = rawrij."open";
    if (low < rawrij.laag) then 
      koersrij.laag:=low;
    end if;
    if (high > rawrij.hoog) then
      koersrij.hoog:=high;
    end if;
    if (vol >rawrij.volume) then 
      koersrij.volume:=vol;
    end if;
    koersrij.slot:="last";
    update koersid set volume=koersrij.volume,laag=koersrij.laag,hoog=koersrij.hoog,slot=koersrij.slot where id=transrij.id and datum=date(datstr);
  end if;

  return next koersrij;

  return;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.nieuwkoersinfo(name character varying, datstr character varying, vol integer, open double precision, high double precision, low double precision, "last" double precision) OWNER TO mfvl;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '/usr/local/pgsql/lib/plpgsql.so', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO mfvl;

--
-- Name: remove_koersinfo(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION remove_koersinfo() RETURNS "trigger"
    AS $$declare
	c integer;
begin
	select count(slot) into c from koersid where id=OLD.id;
	raise notice 'There were % records in database for % (%)',c,OLD.naam,OLD.id;
	delete from koersid where id=OLD.id;
	return OLD;
	end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.remove_koersinfo() OWNER TO mfvl;

--
-- Name: aandeelid; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE aandeelid (
    id integer,
    datum date,
    actie integer,
    aantal double precision,
    kosten double precision,
    koers double precision
);


ALTER TABLE public.aandeelid OWNER TO mfvl;

--
-- Name: actietab; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE actietab (
    id integer,
    actie character varying
);


ALTER TABLE public.actietab OWNER TO mfvl;

--
-- Name: aandeel; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW aandeel AS
    SELECT r.naam, a.datum, c.actie, a.aantal, a.kosten, a.koers FROM aandeelid a, rekening r, actietab c WHERE ((a.id = r.id) AND (a.actie = c.id));


ALTER TABLE public.aandeel OWNER TO mfvl;

--
-- Name: budgetcd; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE budgetcd (
    budgetcode character varying,
    id integer
);


ALTER TABLE public.budgetcd OWNER TO mfvl;

--
-- Name: giro; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE giro (
    datum date,
    mut character varying,
    volgnr integer,
    reknr integer,
    naam character varying,
    budgetcode integer,
    bedrag double precision,
    opmerkingen character varying
);


ALTER TABLE public.giro OWNER TO mfvl;

--
-- Name: koersen_vandaag; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW koersen_vandaag AS
    SELECT koers.naam, koers.datum, koers.volume, koers.open, koers.hoog, koers.laag, koers.slot FROM koers WHERE (koers.datum = date(now())) ORDER BY koers.naam;


ALTER TABLE public.koersen_vandaag OWNER TO mfvl;

--
-- Name: koerstemp; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE koerstemp (
    id integer,
    datum date,
    volume integer,
    open double precision,
    hoog double precision,
    laag double precision,
    slot double precision
);


ALTER TABLE public.koerstemp OWNER TO mfvl;

--
-- Name: rekening_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE rekening_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.rekening_id_seq OWNER TO mfvl;

--
-- Name: rekening_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE rekening_id_seq OWNED BY rekening.id;


--
-- Name: reksoort; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE reksoort (
    soort character(1),
    naam character varying
);


ALTER TABLE public.reksoort OWNER TO mfvl;

--
-- Name: vertaal; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE vertaal (
    naam1 character varying,
    naam2 character varying
);


ALTER TABLE public.vertaal OWNER TO mfvl;

--
-- Name: rektrans; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW rektrans AS
    SELECT rekening.id, rekening.naam FROM rekening UNION SELECT rekening.id, vertaal.naam1 AS naam FROM vertaal, rekening WHERE ((rekening.naam)::text = (vertaal.naam2)::text);


ALTER TABLE public.rektrans OWNER TO mfvl;

--
-- Name: spaar; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE spaar (
    id integer,
    datum date,
    bedrag double precision,
    actie integer
);


ALTER TABLE public.spaar OWNER TO mfvl;

--
-- Name: sparen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW sparen AS
    SELECT r.naam, s.datum, s.bedrag, c.actie FROM spaar s, rekening r, actietab c WHERE ((s.id = r.id) AND (s.actie = c.id));


ALTER TABLE public.sparen OWNER TO mfvl;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE rekening ALTER COLUMN id SET DEFAULT nextval('rekening_id_seq'::regclass);


--
-- Name: koers003; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY koersid
    ADD CONSTRAINT koers003 UNIQUE (id, datum);


--
-- Name: rekening_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY rekening
    ADD CONSTRAINT rekening_id_key UNIQUE (id);


--
-- Name: rekening_naam_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY rekening
    ADD CONSTRAINT rekening_naam_key UNIQUE (naam);


--
-- Name: vert001; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY vertaal
    ADD CONSTRAINT vert001 UNIQUE (naam1);


--
-- Name: koers001; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX koers001 ON koersid USING btree (datum);


--
-- Name: koers002; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX koers002 ON koersid USING btree (id);


--
-- Name: koers_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE koers_ins AS ON INSERT TO koers DO INSTEAD INSERT INTO koersid (id, datum, volume, open, hoog, laag, slot) SELECT x.id, new.datum, new.volume, new.open, new.hoog, new.laag, new.slot FROM rektrans x WHERE ((x.naam)::text = (new.naam)::text);


--
-- Name: test1; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER test1
    BEFORE DELETE ON rekening
    FOR EACH ROW
    EXECUTE PROCEDURE remove_koersinfo();


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

