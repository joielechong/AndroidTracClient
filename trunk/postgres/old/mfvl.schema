--
-- PostgreSQL database dump
--

SET client_encoding = 'UNICODE';
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


SET search_path = public, pg_catalog;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO mfvl;

--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: public; Owner: 
--

CREATE TRUSTED PROCEDURAL LANGUAGE plpgsql HANDLER plpgsql_call_handler;


--
-- Name: af_contact_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_del() RETURNS "trigger"
    AS $$begin
	delete from naw where contact_id=old.id;
	delete from catcontact where contact_id=old.id;
	delete from fax where contact_id=old.id;
	delete from telephone where contact_id=old.id;
	delete from mail where contact_id=old.id;
	delete from relaties where contact_id=old.id;
	update relaties set relatie_id = null where relatie_id=old.id;
return old;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_contact_del() OWNER TO mfvl;

--
-- Name: af_contact_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_updtime() RETURNS "trigger"
    AS $$begin
  new.updatetime=now();
  return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_contact_updtime() OWNER TO mfvl;

--
-- Name: af_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime() RETURNS "trigger"
    AS $$begin
  update contacts set updatetime=now() where id=new.contact_id;
  return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_updtime() OWNER TO mfvl;

--
-- Name: af_updtime1(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime1() RETURNS "trigger"
    AS $$begin
  update contacts set updatetime=now() where id=old.contact_id;
  return old;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_updtime1() OWNER TO mfvl;

--
-- Name: ldap_create(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_create() RETURNS "trigger"
    AS $$begin
insert into ldap_entries (dn,oc_map_id,parent,keyval) values ('cn='||new.cn||',o=outlook',1,0,new.id); return new; end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_create() OWNER TO mfvl;

--
-- Name: ldap_delete(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_delete() RETURNS "trigger"
    AS $$begin
delete from ldap_entries where keyval = old.id;
return old;
end; $$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_delete() OWNER TO mfvl;

--
-- Name: ldap_update(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_update() RETURNS "trigger"
    AS $$begin
if (old.cn != new.cn) then
update ldap_entries set dn='cn='||new.cn||',o=outlook' where keyval=new.id;
end if;
return new;end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_update() OWNER TO mfvl;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: adr_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE adr_types (
    adr_type character varying NOT NULL
);


ALTER TABLE public.adr_types OWNER TO mfvl;

--
-- Name: attr; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE attr (
    id serial NOT NULL,
    contact_id integer
);


ALTER TABLE public.attr OWNER TO mfvl;

--
-- Name: contacts; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE contacts (
    id serial NOT NULL,
    fileas character varying NOT NULL,
    naam character varying NOT NULL,
    outlooktime timestamp with time zone,
    ldaptime timestamp with time zone,
    voornaam character varying,
    achternaam character varying,
    webpagina character varying,
    company character varying,
    updatetime timestamp with time zone NOT NULL,
    cn character varying,
    geslacht character(1),
    uid character varying,
    "password" character varying,
    CONSTRAINT geslacht CHECK (((geslacht = 'M'::bpchar) OR (geslacht = 'V'::bpchar)))
);


ALTER TABLE public.contacts OWNER TO mfvl;

--
-- Name: naw; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE naw (
    straat character varying,
    provincie character varying,
    postcode character varying,
    stad character varying,
    land character varying,
    adr_type character varying,
    standaard boolean DEFAULT false
)
INHERITS (attr);


ALTER TABLE public.naw OWNER TO mfvl;

--
-- Name: adres; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW adres AS
    SELECT contacts.naam, naw.straat, naw.postcode, naw.stad, naw.land FROM contacts, naw WHERE (contacts.id = naw.contact_id);


ALTER TABLE public.adres OWNER TO mfvl;

--
-- Name: catcontact; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE catcontact (
    cat_id integer
)
INHERITS (attr);


ALTER TABLE public.catcontact OWNER TO mfvl;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE categories (
    id serial NOT NULL,
    categorie character varying
);


ALTER TABLE public.categories OWNER TO mfvl;

--
-- Name: mail; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE mail (
    mailaddress character varying,
    priority integer
)
INHERITS (attr);


ALTER TABLE public.mail OWNER TO mfvl;

--
-- Name: email; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW email AS
    SELECT contacts.naam, mail.mailaddress, mail.priority FROM contacts, mail WHERE (contacts.id = mail.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.email OWNER TO mfvl;

--
-- Name: fax; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE fax (
    number character varying NOT NULL,
    fax_type character varying,
    prio integer
)
INHERITS (attr);


ALTER TABLE public.fax OWNER TO mfvl;

--
-- Name: ldap_attr_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_attr_mappings (
    id serial NOT NULL,
    oc_map_id integer NOT NULL,
    name character varying(255) NOT NULL,
    sel_expr character varying(255) NOT NULL,
    sel_expr_u character varying(255),
    from_tbls character varying(255) NOT NULL,
    join_where character varying(255),
    add_proc character varying(255),
    delete_proc character varying(255),
    param_order integer NOT NULL,
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_attr_mappings OWNER TO mfvl;

--
-- Name: ldap_entries; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entries (
    id serial NOT NULL,
    dn character varying(255) NOT NULL,
    oc_map_id integer NOT NULL,
    parent integer NOT NULL,
    keyval integer NOT NULL
);


ALTER TABLE public.ldap_entries OWNER TO mfvl;

--
-- Name: ldap_entry_objclasses; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entry_objclasses (
    entry_id integer NOT NULL,
    oc_name character varying(64)
);


ALTER TABLE public.ldap_entry_objclasses OWNER TO mfvl;

--
-- Name: ldap_oc_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_oc_mappings (
    id serial NOT NULL,
    name character varying(64) NOT NULL,
    keytbl character varying(64) NOT NULL,
    keycol character varying(64) NOT NULL,
    create_proc character varying(255),
    delete_proc character varying(255),
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_oc_mappings OWNER TO mfvl;

--
-- Name: relaties; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relaties (
    naam character varying,
    relatie character varying,
    relatie_id integer
)
INHERITS (attr);


ALTER TABLE public.relaties OWNER TO mfvl;

--
-- Name: relatievormen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relatievormen (
    relatie character varying NOT NULL
);


ALTER TABLE public.relatievormen OWNER TO mfvl;

--
-- Name: tel_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE tel_types (
    tel_type character varying NOT NULL
);


ALTER TABLE public.tel_types OWNER TO mfvl;

--
-- Name: telephone; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telephone (
    number character varying,
    tel_type character varying,
    prio integer
)
INHERITS (attr);


ALTER TABLE public.telephone OWNER TO mfvl;

--
-- Name: telnummer; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW telnummer AS
    SELECT contacts.naam, telephone.number, telephone.tel_type FROM contacts, telephone WHERE (contacts.id = telephone.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.telnummer OWNER TO mfvl;

--
-- Name: adr_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY adr_types
    ADD CONSTRAINT adr_types_pkey PRIMARY KEY (adr_type);


ALTER INDEX public.adr_types_pkey OWNER TO mfvl;

--
-- Name: attr_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY attr
    ADD CONSTRAINT attr_pkey PRIMARY KEY (id);


ALTER INDEX public.attr_pkey OWNER TO mfvl;

--
-- Name: catcontact_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_contact_id_key UNIQUE (contact_id, cat_id);


ALTER INDEX public.catcontact_contact_id_key OWNER TO mfvl;

--
-- Name: categories_categorie_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_categorie_key UNIQUE (categorie);


ALTER INDEX public.categories_categorie_key OWNER TO mfvl;

--
-- Name: categories_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


ALTER INDEX public.categories_pkey OWNER TO mfvl;

--
-- Name: contacts_fileas_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_fileas_key UNIQUE (fileas);


ALTER INDEX public.contacts_fileas_key OWNER TO mfvl;

--
-- Name: contacts_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_pkey PRIMARY KEY (id);


ALTER INDEX public.contacts_pkey OWNER TO mfvl;

--
-- Name: contacts_uid_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_uid_key UNIQUE (uid);


ALTER INDEX public.contacts_uid_key OWNER TO mfvl;

--
-- Name: fax_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_key UNIQUE (contact_id, fax_type, prio);


ALTER INDEX public.fax_contact_id_key OWNER TO mfvl;

--
-- Name: ldap_attr_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_pkey PRIMARY KEY (id);


ALTER INDEX public.ldap_attr_mappings_pkey OWNER TO mfvl;

--
-- Name: ldap_entries_dn_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_dn_key UNIQUE (dn);


ALTER INDEX public.ldap_entries_dn_key OWNER TO mfvl;

--
-- Name: ldap_entries_oc_map_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_key UNIQUE (oc_map_id, keyval);


ALTER INDEX public.ldap_entries_oc_map_id_key OWNER TO mfvl;

--
-- Name: ldap_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_pkey PRIMARY KEY (id);


ALTER INDEX public.ldap_entries_pkey OWNER TO mfvl;

--
-- Name: ldap_oc_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_oc_mappings
    ADD CONSTRAINT ldap_oc_mappings_pkey PRIMARY KEY (id);


ALTER INDEX public.ldap_oc_mappings_pkey OWNER TO mfvl;

--
-- Name: mail_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_contact_id_key UNIQUE (contact_id, priority);


ALTER INDEX public.mail_contact_id_key OWNER TO mfvl;

--
-- Name: mail_mailaddress_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_mailaddress_key UNIQUE (mailaddress);


ALTER INDEX public.mail_mailaddress_key OWNER TO mfvl;

--
-- Name: relatievormen_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY relatievormen
    ADD CONSTRAINT relatievormen_pkey PRIMARY KEY (relatie);


ALTER INDEX public.relatievormen_pkey OWNER TO mfvl;

--
-- Name: tel_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY tel_types
    ADD CONSTRAINT tel_types_pkey PRIMARY KEY (tel_type);


ALTER INDEX public.tel_types_pkey OWNER TO mfvl;

--
-- Name: telephone_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_key UNIQUE (contact_id, number, tel_type);


ALTER INDEX public.telephone_contact_id_key OWNER TO mfvl;

--
-- Name: teleprio; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT teleprio UNIQUE (contact_id, tel_type, prio);


ALTER INDEX public.teleprio OWNER TO mfvl;

--
-- Name: uninaw; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT uninaw UNIQUE (contact_id, adr_type);


ALTER INDEX public.uninaw OWNER TO mfvl;

--
-- Name: _INSERT; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE "_INSERT" AS ON INSERT TO telnummer DO INSTEAD INSERT INTO telephone (contact_id, number, tel_type) SELECT contacts.id, new.number, new.tel_type FROM contacts WHERE ((contacts.naam)::text = (new.naam)::text);


--
-- Name: af_attr_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_del
    BEFORE DELETE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_attr_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_upd
    BEFORE INSERT OR UPDATE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_cat_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_del
    BEFORE DELETE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_cat_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_upd
    BEFORE INSERT OR UPDATE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_contact_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_del
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_del();


--
-- Name: af_contact_updtime; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_updtime
    BEFORE INSERT OR UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_updtime();


--
-- Name: af_fax_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_del
    BEFORE DELETE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_fax_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_upd
    BEFORE INSERT OR UPDATE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_mail_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_del
    BEFORE DELETE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_mail_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_upd
    BEFORE INSERT OR UPDATE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_naw_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_del
    BEFORE DELETE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_naw_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_upd
    BEFORE INSERT OR UPDATE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_rel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_del
    BEFORE DELETE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_rel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_upd
    BEFORE INSERT OR UPDATE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_tel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_del
    BEFORE DELETE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_tel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_upd
    BEFORE INSERT OR UPDATE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: ldap_create; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_create
    AFTER INSERT ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_create();


--
-- Name: ldap_delete; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_delete
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_delete();


--
-- Name: ldap_update; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_update
    AFTER UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_update();


--
-- Name: adr_type; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT adr_type FOREIGN KEY (adr_type) REFERENCES adr_types(adr_type);


--
-- Name: attr_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY attr
    ADD CONSTRAINT attr_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: catcontact_cat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_cat_id_fkey FOREIGN KEY (cat_id) REFERENCES categories(id);


--
-- Name: fax_fax_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_fax_type_fkey FOREIGN KEY (fax_type) REFERENCES tel_types(tel_type);


--
-- Name: ldap_attr_mappings_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entries_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entry_objclasses_entry_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entry_objclasses
    ADD CONSTRAINT ldap_entry_objclasses_entry_id_fkey FOREIGN KEY (entry_id) REFERENCES ldap_entries(id);


--
-- Name: relaties_relatie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_fkey FOREIGN KEY (relatie) REFERENCES relatievormen(relatie);


--
-- Name: relaties_relatie_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_id_fkey FOREIGN KEY (relatie_id) REFERENCES contacts(id);


--
-- Name: telephone_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_type_fkey FOREIGN KEY (tel_type) REFERENCES tel_types(tel_type);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

