--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plperl; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plperl;


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: tablefunc_crosstab_2; Type: TYPE; Schema: public; Owner: mfvl
--

CREATE TYPE tablefunc_crosstab_2 AS (
	row_name text,
	category_1 text,
	category_2 text
);


ALTER TYPE public.tablefunc_crosstab_2 OWNER TO mfvl;

--
-- Name: tablefunc_crosstab_3; Type: TYPE; Schema: public; Owner: mfvl
--

CREATE TYPE tablefunc_crosstab_3 AS (
	row_name text,
	category_1 text,
	category_2 text,
	category_3 text
);


ALTER TYPE public.tablefunc_crosstab_3 OWNER TO mfvl;

--
-- Name: tablefunc_crosstab_4; Type: TYPE; Schema: public; Owner: mfvl
--

CREATE TYPE tablefunc_crosstab_4 AS (
	row_name text,
	category_1 text,
	category_2 text,
	category_3 text,
	category_4 text
);


ALTER TYPE public.tablefunc_crosstab_4 OWNER TO mfvl;

--
-- Name: add_categorie(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION add_categorie() RETURNS "trigger"
    AS $$
declare 
  newcat varchar;
  girorek bigint;
  rek bigint;
  nm varchar;
  omschr varchar;
  tp varchar;
begin 
  girorek := NEW.girorekening;
  rek := NEW.rekening;
  nm := NEW.naam;
  omschr := NEW.omschrijving;
  tp := NEW.type;

  if ( tp = 'GM') then
    if ( omschr like '%797Q282%' ) then
      newcat := 'CASH';
    else 
      if ( omschr like '%320R243%' ) then
        newcat := 'CASH';
      else
        newcat :='CASH';
      end if;
    end if;
    NEW.categorie := newcat;
  else
    select into newcat categorie from autocat where girorekening=girorek and rekening=rek;
    if found then
      NEW.categorie := newcat;
      raise info 'Categorie = % voor %/%/%/%',newcat,NEW.datum,girorek,rek,NEW.bedrag;
    else
      select into newcat categorie from autocat1 where nm like naam;
      if found then
        NEW.categorie := newcat;
        raise info 'Categorie = % voor %/%/%/%',newcat,NEW.datum,girorek,rek,NEW.bedrag;
      else
        select into newcat categorie from autocat2 where omschr like omschrijving;
        if found then
          NEW.categorie := newcat;
          raise info 'Categorie = % voor %/%/%/%',newcat,NEW.datum,girorek,rek,NEW.bedrag;
        else
          raise info 'Geen categorie voor %/%/%/%',NEW.datum,girorek,rek,NEW.bedrag;
        end if;
      end if;
    end if;
  end if;
  return NEW;
end; $$
    LANGUAGE plpgsql;


ALTER FUNCTION public.add_categorie() OWNER TO mfvl;

--
-- Name: af_album_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_album_del() RETURNS "trigger"
    AS $$begin 
  delete from albumfoto where albumid=old.id; 
  return old; 
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_album_del() OWNER TO mfvl;

--
-- Name: af_fotos_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_fotos_del() RETURNS "trigger"
    AS $$begin 
  delete from albumfoto where fotoid=old.id; 
  return old; 
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_fotos_del() OWNER TO mfvl;

--
-- Name: af_fotos_ins(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_fotos_ins() RETURNS "trigger"
    AS $$begin
  insert into albumfoto values (0,new.id,new.id);
  return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_fotos_ins() OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, integer, text) RETURNS SETOF record
    AS '$libdir/tablefunc', 'connectby_text'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.connectby(text, text, text, text, integer, text) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, integer) RETURNS SETOF record
    AS '$libdir/tablefunc', 'connectby_text'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.connectby(text, text, text, text, integer) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, text, integer, text) RETURNS SETOF record
    AS '$libdir/tablefunc', 'connectby_text_serial'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.connectby(text, text, text, text, text, integer, text) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, text, integer) RETURNS SETOF record
    AS '$libdir/tablefunc', 'connectby_text_serial'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.connectby(text, text, text, text, text, integer) OWNER TO mfvl;

--
-- Name: crosstab(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text) RETURNS SETOF record
    AS '$libdir/tablefunc', 'crosstab'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab(text) OWNER TO mfvl;

--
-- Name: crosstab(text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text, integer) RETURNS SETOF record
    AS '$libdir/tablefunc', 'crosstab'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab(text, integer) OWNER TO mfvl;

--
-- Name: crosstab(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text, text) RETURNS SETOF record
    AS '$libdir/tablefunc', 'crosstab_hash'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab(text, text) OWNER TO mfvl;

--
-- Name: crosstab2(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab2(text) RETURNS SETOF tablefunc_crosstab_2
    AS '$libdir/tablefunc', 'crosstab'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab2(text) OWNER TO mfvl;

--
-- Name: crosstab3(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab3(text) RETURNS SETOF tablefunc_crosstab_3
    AS '$libdir/tablefunc', 'crosstab'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab3(text) OWNER TO mfvl;

--
-- Name: crosstab4(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab4(text) RETURNS SETOF tablefunc_crosstab_4
    AS '$libdir/tablefunc', 'crosstab'
    LANGUAGE c STABLE STRICT;


ALTER FUNCTION public.crosstab4(text) OWNER TO mfvl;

--
-- Name: day(date); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION "day"(datum date) RETURNS integer
    AS $$begin return date_part('day',datum); end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public."day"(datum date) OWNER TO mfvl;

--
-- Name: getfirstlow(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION getfirstlow(text) RETURNS text
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return substr(lc($value),0,1);
$_$
    LANGUAGE plperl;


ALTER FUNCTION public.getfirstlow(text) OWNER TO mfvl;

--
-- Name: month(date); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION "month"(datum date) RETURNS integer
    AS $$begin return date_part('month',datum); end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public."month"(datum date) OWNER TO mfvl;

--
-- Name: normal_rand(integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION normal_rand(integer, double precision, double precision) RETURNS SETOF double precision
    AS '$libdir/tablefunc', 'normal_rand'
    LANGUAGE c STRICT;


ALTER FUNCTION public.normal_rand(integer, double precision, double precision) OWNER TO mfvl;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '/usr/local/pgsql/lib/plpgsql.so', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO mfvl;

--
-- Name: tolower(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION tolower(text) RETURNS text
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return lc($value);
$_$
    LANGUAGE plperl;


ALTER FUNCTION public.tolower(text) OWNER TO mfvl;

--
-- Name: tp_fietsers_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION tp_fietsers_del() RETURNS "trigger"
    AS $$begin
  delete from type where type.id=old.id;
  return old; 
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.tp_fietsers_del() OWNER TO mfvl;

--
-- Name: year(date); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION "year"(datum date) RETURNS integer
    AS $$begin return date_part('year',datum); end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public."year"(datum date) OWNER TO mfvl;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: giro; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE giro (
    girorekening bigint,
    datum integer,
    "type" character(2),
    volgnr integer,
    rekening bigint,
    naam character varying,
    bedrag double precision,
    omschrijving character varying,
    categorie character varying DEFAULT 'NTB'::character varying
);


ALTER TABLE public.giro OWNER TO root;

--
-- Name: BIJFINkaart; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW "BIJFINkaart" AS
    SELECT giro.datum, giro.volgnr, giro.naam, giro.bedrag, giro.categorie FROM giro WHERE (giro.girorekening = 27280350011::bigint) ORDER BY giro.datum;


ALTER TABLE public."BIJFINkaart" OWNER TO mfvl;

--
-- Name: VISAkaart; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW "VISAkaart" AS
    SELECT giro.datum, giro.volgnr, giro.naam, giro.bedrag, giro.categorie FROM giro WHERE (giro.girorekening = 4175250010::bigint) ORDER BY giro.datum;


ALTER TABLE public."VISAkaart" OWNER TO mfvl;

--
-- Name: album; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE album (
    id integer NOT NULL,
    naam character varying NOT NULL,
    default_read boolean DEFAULT false,
    default_modify boolean DEFAULT false
);


ALTER TABLE public.album OWNER TO mfvl;

--
-- Name: album_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE album_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.album_id_seq OWNER TO mfvl;

--
-- Name: album_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE album_id_seq OWNED BY album.id;


--
-- Name: album_users; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE album_users (
    userid integer NOT NULL,
    albumid integer NOT NULL,
    "read" boolean DEFAULT false,
    modify boolean DEFAULT false
);


ALTER TABLE public.album_users OWNER TO mfvl;

--
-- Name: albumfoto; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE albumfoto (
    albumid integer NOT NULL,
    fotoid integer NOT NULL,
    seqnr integer,
    omschrijving character varying DEFAULT ''::character varying,
    width integer DEFAULT 0,
    height integer DEFAULT 0,
    rotate integer DEFAULT 0
);


ALTER TABLE public.albumfoto OWNER TO mfvl;

--
-- Name: autocat; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE autocat (
    girorekening bigint,
    rekening integer,
    categorie character varying
);


ALTER TABLE public.autocat OWNER TO mfvl;

--
-- Name: autocat1; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE autocat1 (
    naam character varying,
    categorie character varying
);


ALTER TABLE public.autocat1 OWNER TO mfvl;

--
-- Name: autocat2; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE autocat2 (
    omschrijving character varying,
    categorie character varying
);


ALTER TABLE public.autocat2 OWNER TO mfvl;

--
-- Name: fietsers; Type: TABLE; Schema: public; Owner: httpd; Tablespace: 
--

CREATE TABLE fietsers (
    id integer NOT NULL,
    naam character varying NOT NULL,
    email character varying NOT NULL,
    woonplaats character varying NOT NULL,
    geslacht character(1) NOT NULL,
    leeftijd integer,
    geboortejaar integer,
    voorkeur character varying,
    aanmaak date,
    wijzig date,
    "password" character varying,
    groep character varying DEFAULT 'fietser'::character varying,
    hits integer DEFAULT 0
);


ALTER TABLE public.fietsers OWNER TO httpd;

--
-- Name: fietslinks; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE fietslinks (
    id integer NOT NULL,
    url character varying,
    count integer,
    visit date,
    last_status integer,
    curr_status integer
);


ALTER TABLE public.fietslinks OWNER TO mfvl;

--
-- Name: fietslinks_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE fietslinks_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.fietslinks_id_seq OWNER TO mfvl;

--
-- Name: fietslinks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE fietslinks_id_seq OWNED BY fietslinks.id;


SET default_with_oids = false;

--
-- Name: filetemp; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE filetemp (
    filename character varying NOT NULL
);


ALTER TABLE public.filetemp OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: foto_users; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE foto_users (
    id integer NOT NULL,
    email character varying,
    "password" character varying,
    "read" boolean DEFAULT false,
    modify boolean DEFAULT false
);


ALTER TABLE public.foto_users OWNER TO mfvl;

--
-- Name: foto_users_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE foto_users_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.foto_users_id_seq OWNER TO mfvl;

--
-- Name: foto_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE foto_users_id_seq OWNED BY foto_users.id;


--
-- Name: fotos; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE fotos (
    filename character varying NOT NULL,
    omschrijving character varying,
    id integer NOT NULL,
    thumbnail oid,
    datum date,
    camera character varying,
    filmnr integer,
    fotonr integer,
    hitcount integer,
    auteur character varying
);


ALTER TABLE public.fotos OWNER TO mfvl;

--
-- Name: fotos_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE fotos_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.fotos_id_seq OWNER TO mfvl;

--
-- Name: fotos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE fotos_id_seq OWNED BY fotos.id;


--
-- Name: giro1; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW giro1 AS
    SELECT (giro.datum / 10000) AS jaar, mod((giro.datum / 100), 100) AS maand, mod(giro.datum, 100) AS dag, giro.girorekening, giro."type", giro.volgnr, giro.rekening, giro.naam, giro.bedrag, giro.omschrijving, giro.categorie FROM giro;


ALTER TABLE public.giro1 OWNER TO mfvl;

--
-- Name: giro2; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW giro2 AS
    SELECT (giro.datum / 100) AS maand, giro.categorie, sum(giro.bedrag) AS bedrag FROM giro GROUP BY (giro.datum / 100), giro.categorie ORDER BY (giro.datum / 100), giro.categorie;


ALTER TABLE public.giro2 OWNER TO mfvl;

--
-- Name: giro_maand; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW giro_maand AS
    SELECT (giro.datum / 100) AS maand, giro.categorie, sum(giro.bedrag) AS sum FROM giro WHERE (giro.girorekening <> 631934) GROUP BY (giro.datum / 100), giro.categorie ORDER BY (giro.datum / 100);


ALTER TABLE public.giro_maand OWNER TO mfvl;

--
-- Name: girotmp; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE girotmp (
    girorekening integer,
    datum integer,
    naam character varying,
    "type" character(2),
    rekening integer,
    bedrag double precision
);


ALTER TABLE public.girotmp OWNER TO mfvl;

--
-- Name: girotmp1; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE girotmp1 (
    girorekening integer,
    datum integer,
    "type" character(2),
    volgnr integer,
    rekening integer,
    naam character varying,
    bedrag double precision,
    omschrijving character varying
);


ALTER TABLE public.girotmp1 OWNER TO mfvl;

--
-- Name: marianne; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW marianne AS
    SELECT giro.categorie, sum(giro.bedrag) AS totaalbedrag FROM giro WHERE ((giro.datum > 20041100) AND (((giro.categorie)::text ~~ '%-L'::text) OR ((giro.categorie)::text ~~ 'FLAT%'::text))) GROUP BY giro.categorie;


ALTER TABLE public.marianne OWNER TO mfvl;

--
-- Name: ntb; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW ntb AS
    SELECT giro.oid, giro.girorekening, giro.datum, giro."type", giro.volgnr, giro.rekening, giro.naam, giro.bedrag, giro.omschrijving, giro.categorie FROM giro WHERE (((giro.categorie)::text = 'NTB'::text) AND (giro.girorekening = ANY (ARRAY[(3808539)::bigint, (5282350)::bigint]))) ORDER BY giro.datum DESC;


ALTER TABLE public.ntb OWNER TO mfvl;

--
-- Name: saldo; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE saldo (
    datum integer,
    girorekening integer,
    rekening character varying,
    saldo double precision
);


ALTER TABLE public.saldo OWNER TO root;

--
-- Name: type; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE "type" (
    id integer,
    "type" character varying
);


ALTER TABLE public."type" OWNER TO mfvl;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE album ALTER COLUMN id SET DEFAULT nextval('album_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE fietslinks ALTER COLUMN id SET DEFAULT nextval('fietslinks_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE foto_users ALTER COLUMN id SET DEFAULT nextval('foto_users_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE fotos ALTER COLUMN id SET DEFAULT nextval('fotos_id_seq'::regclass);


--
-- Name: ac_001; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY autocat
    ADD CONSTRAINT ac_001 UNIQUE (girorekening, rekening);


--
-- Name: album_naam; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY album
    ADD CONSTRAINT album_naam UNIQUE (naam);


--
-- Name: album_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY album
    ADD CONSTRAINT album_pkey PRIMARY KEY (id);


--
-- Name: album_users_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY album_users
    ADD CONSTRAINT album_users_pkey PRIMARY KEY (userid, albumid);


--
-- Name: albumfoto_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY albumfoto
    ADD CONSTRAINT albumfoto_pkey PRIMARY KEY (fotoid, albumid);


--
-- Name: email001; Type: CONSTRAINT; Schema: public; Owner: httpd; Tablespace: 
--

ALTER TABLE ONLY fietsers
    ADD CONSTRAINT email001 UNIQUE (email);


--
-- Name: fietsers_pkey; Type: CONSTRAINT; Schema: public; Owner: httpd; Tablespace: 
--

ALTER TABLE ONLY fietsers
    ADD CONSTRAINT fietsers_pkey PRIMARY KEY (id);


--
-- Name: fietslinks_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fietslinks
    ADD CONSTRAINT fietslinks_id_key UNIQUE (id);


--
-- Name: filetemp_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY filetemp
    ADD CONSTRAINT filetemp_pkey PRIMARY KEY (filename);


--
-- Name: fotos_filename_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fotos
    ADD CONSTRAINT fotos_filename_key UNIQUE (filename);


--
-- Name: fotos_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fotos
    ADD CONSTRAINT fotos_pkey PRIMARY KEY (id);


--
-- Name: saldo_001; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY saldo
    ADD CONSTRAINT saldo_001 UNIQUE (datum, girorekening, rekening);


--
-- Name: url; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fietslinks
    ADD CONSTRAINT url UNIQUE (url);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY foto_users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: ac1_001; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX ac1_001 ON autocat1 USING btree (naam);


--
-- Name: af1; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX af1 ON albumfoto USING btree (albumid);


--
-- Name: af2; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX af2 ON albumfoto USING btree (fotoid);


--
-- Name: fotos_datum; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX fotos_datum ON fotos USING btree (datum);


--
-- Name: giro_idx01; Type: INDEX; Schema: public; Owner: root; Tablespace: 
--

CREATE INDEX giro_idx01 ON giro USING btree (girorekening, datum);


--
-- Name: giro_idx02; Type: INDEX; Schema: public; Owner: root; Tablespace: 
--

CREATE INDEX giro_idx02 ON giro USING btree (datum);


--
-- Name: type_idx01; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX type_idx01 ON "type" USING btree (id);


--
-- Name: type_idx02; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX type_idx02 ON "type" USING btree ("type");


--
-- Name: us001; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX us001 ON foto_users USING btree (email);


--
-- Name: bijfin_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE bijfin_ins AS ON INSERT TO "BIJFINkaart" DO INSTEAD INSERT INTO giro (girorekening, datum, "type", volgnr, rekening, naam, bedrag, omschrijving, categorie) VALUES (27280350011::bigint, new.datum, 'CR'::bpchar, new.volgnr, NULL::bigint, new.naam, new.bedrag, NULL::character varying, new.categorie);


--
-- Name: ntb_cat; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE ntb_cat AS ON UPDATE TO ntb WHERE ((new.categorie)::text <> 'NTB'::text) DO INSTEAD UPDATE giro SET categorie = new.categorie WHERE (giro.oid = old.oid);


--
-- Name: ntb_cat_dum; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE ntb_cat_dum AS ON UPDATE TO ntb DO INSTEAD NOTHING;


--
-- Name: visa_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE visa_ins AS ON INSERT TO "VISAkaart" DO INSTEAD INSERT INTO giro (girorekening, datum, "type", volgnr, rekening, naam, bedrag, omschrijving, categorie) VALUES (4175250010::bigint, new.datum, 'CR'::bpchar, new.volgnr, NULL::bigint, new.naam, new.bedrag, NULL::character varying, new.categorie);


--
-- Name: add_categorie; Type: TRIGGER; Schema: public; Owner: root
--

CREATE TRIGGER add_categorie
    BEFORE INSERT ON giro
    FOR EACH ROW
    EXECUTE PROCEDURE add_categorie();


--
-- Name: af_album_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_album_del
    BEFORE DELETE ON album
    FOR EACH ROW
    EXECUTE PROCEDURE af_album_del();


--
-- Name: af_fotos_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fotos_del
    BEFORE DELETE ON fotos
    FOR EACH ROW
    EXECUTE PROCEDURE af_fotos_del();


--
-- Name: af_fotos_ins; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fotos_ins
    AFTER INSERT ON fotos
    FOR EACH ROW
    EXECUTE PROCEDURE af_fotos_ins();


--
-- Name: tp_fietsers_del; Type: TRIGGER; Schema: public; Owner: httpd
--

CREATE TRIGGER tp_fietsers_del
    BEFORE DELETE ON fietsers
    FOR EACH ROW
    EXECUTE PROCEDURE tp_fietsers_del();


--
-- Name: albumid; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY albumfoto
    ADD CONSTRAINT albumid FOREIGN KEY (albumid) REFERENCES album(id);


--
-- Name: albumid; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY album_users
    ADD CONSTRAINT albumid FOREIGN KEY (albumid) REFERENCES album(id);


--
-- Name: fotoid; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY albumfoto
    ADD CONSTRAINT fotoid FOREIGN KEY (fotoid) REFERENCES fotos(id);


--
-- Name: typeid; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY "type"
    ADD CONSTRAINT typeid FOREIGN KEY (id) REFERENCES fietsers(id);


--
-- Name: userid; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY album_users
    ADD CONSTRAINT userid FOREIGN KEY (userid) REFERENCES foto_users(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: giro; Type: ACL; Schema: public; Owner: root
--

REVOKE ALL ON TABLE giro FROM PUBLIC;
REVOKE ALL ON TABLE giro FROM root;
GRANT ALL ON TABLE giro TO root;
GRANT ALL ON TABLE giro TO mfvl;


--
-- Name: album; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE album FROM PUBLIC;
REVOKE ALL ON TABLE album FROM mfvl;
GRANT ALL ON TABLE album TO mfvl;
GRANT ALL ON TABLE album TO httpd;


--
-- Name: album_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE album_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE album_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE album_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE album_id_seq TO httpd WITH GRANT OPTION;


--
-- Name: album_users; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE album_users FROM PUBLIC;
REVOKE ALL ON TABLE album_users FROM mfvl;
GRANT ALL ON TABLE album_users TO mfvl;
GRANT ALL ON TABLE album_users TO httpd;


--
-- Name: albumfoto; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE albumfoto FROM PUBLIC;
REVOKE ALL ON TABLE albumfoto FROM mfvl;
GRANT ALL ON TABLE albumfoto TO mfvl;
GRANT ALL ON TABLE albumfoto TO httpd;


--
-- Name: autocat; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE autocat FROM PUBLIC;
REVOKE ALL ON TABLE autocat FROM mfvl;
GRANT ALL ON TABLE autocat TO mfvl;


--
-- Name: autocat1; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE autocat1 FROM PUBLIC;
REVOKE ALL ON TABLE autocat1 FROM mfvl;
GRANT ALL ON TABLE autocat1 TO mfvl;


--
-- Name: autocat2; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE autocat2 FROM PUBLIC;
REVOKE ALL ON TABLE autocat2 FROM mfvl;
GRANT ALL ON TABLE autocat2 TO mfvl;


--
-- Name: fietsers; Type: ACL; Schema: public; Owner: httpd
--

REVOKE ALL ON TABLE fietsers FROM PUBLIC;
REVOKE ALL ON TABLE fietsers FROM httpd;
GRANT ALL ON TABLE fietsers TO httpd;
GRANT ALL ON TABLE fietsers TO mfvl;


--
-- Name: fietslinks; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE fietslinks FROM PUBLIC;
REVOKE ALL ON TABLE fietslinks FROM mfvl;
GRANT ALL ON TABLE fietslinks TO mfvl;
GRANT ALL ON TABLE fietslinks TO httpd;


--
-- Name: fietslinks_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE fietslinks_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fietslinks_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE fietslinks_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE fietslinks_id_seq TO httpd WITH GRANT OPTION;


--
-- Name: foto_users; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE foto_users FROM PUBLIC;
REVOKE ALL ON TABLE foto_users FROM mfvl;
GRANT ALL ON TABLE foto_users TO mfvl;
GRANT ALL ON TABLE foto_users TO httpd;


--
-- Name: foto_users_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE foto_users_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE foto_users_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE foto_users_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE foto_users_id_seq TO httpd WITH GRANT OPTION;


--
-- Name: fotos; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE fotos FROM PUBLIC;
REVOKE ALL ON TABLE fotos FROM mfvl;
GRANT ALL ON TABLE fotos TO mfvl;
GRANT ALL ON TABLE fotos TO httpd;


--
-- Name: fotos_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE fotos_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fotos_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE fotos_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE fotos_id_seq TO httpd;


--
-- Name: giro1; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE giro1 FROM PUBLIC;
REVOKE ALL ON TABLE giro1 FROM mfvl;
GRANT ALL ON TABLE giro1 TO mfvl;


--
-- Name: giro2; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE giro2 FROM PUBLIC;
REVOKE ALL ON TABLE giro2 FROM mfvl;
GRANT ALL ON TABLE giro2 TO mfvl;


--
-- Name: girotmp; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE girotmp FROM PUBLIC;
REVOKE ALL ON TABLE girotmp FROM mfvl;
GRANT ALL ON TABLE girotmp TO mfvl;


--
-- Name: girotmp1; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE girotmp1 FROM PUBLIC;
REVOKE ALL ON TABLE girotmp1 FROM mfvl;
GRANT ALL ON TABLE girotmp1 TO mfvl;


--
-- Name: saldo; Type: ACL; Schema: public; Owner: root
--

REVOKE ALL ON TABLE saldo FROM PUBLIC;
REVOKE ALL ON TABLE saldo FROM root;
GRANT ALL ON TABLE saldo TO root;
GRANT ALL ON TABLE saldo TO mfvl;


--
-- Name: type; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE "type" FROM PUBLIC;
REVOKE ALL ON TABLE "type" FROM mfvl;
GRANT ALL ON TABLE "type" TO mfvl;
GRANT ALL ON TABLE "type" TO httpd;


--
-- PostgreSQL database dump complete
--

