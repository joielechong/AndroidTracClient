State 2 contains 1 shift/reduce conflict.
State 5 contains 1 shift/reduce conflict and 1 reduce/reduce conflict.
State 10 contains 4 reduce/reduce conflicts.
State 16 contains 4 reduce/reduce conflicts.

Grammar
rule 1    program -> TABLE rowheader rows TABLEEND
rule 2    rows -> row
rule 3    rows -> row rows
rule 4    @1 ->		/* empty */
rule 5    row -> ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings
rule 6    val1 -> val
rule 7    val1 -> val strings
rule 8    strings -> STRING
rule 9    strings -> STRING strings
rule 10   val -> STRING
rule 11   val -> FLOAT
rule 12   tijd -> STRING
rule 13   tijd ->		/* empty */
rule 14   rowheader -> ROW rowheads
rule 15   rowheads -> rowhead
rule 16   rowheads -> rowheads rowhead
rule 17   rowhead -> ROWHEAD strings
rule 18   rowhead ->		/* empty */
rule 19   strings -> STRING
rule 20   strings -> STRING strings

Terminals, with rules where they appear

$ (-1)
error (256)
TABLE (257) 1
TABLEEND (258) 1
ROW (259) 5 14
ROWDESC (260) 5
ROWHEAD (261) 5 17
STRING (262) 5 8 9 10 12 19 20
FLOAT (263) 11

Nonterminals, with rules where they appear

program (10)
    on left: 1
rows (11)
    on left: 2 3, on right: 1 3
row (12)
    on left: 5, on right: 2 3
@1 (13)
    on left: 4, on right: 5
val1 (14)
    on left: 6 7, on right: 5
strings (15)
    on left: 8 9 19 20, on right: 5 7 9 17 20
val (16)
    on left: 10 11, on right: 5 6 7
tijd (17)
    on left: 12 13, on right: 5
rowheader (18)
    on left: 14, on right: 1
rowheads (19)
    on left: 15 16, on right: 14 16
rowhead (20)
    on left: 17 18, on right: 15 16


state 0

    TABLE	shift, and go to state 1

    program	go to state 38



state 1

    program  ->  TABLE . rowheader rows TABLEEND   (rule 1)

    ROW 	shift, and go to state 2

    rowheader	go to state 3



state 2

    rowheader  ->  ROW . rowheads   (rule 14)

    ROWHEAD	shift, and go to state 4

    ROWHEAD	[reduce using rule 18 (rowhead)]
    $default	reduce using rule 18 (rowhead)

    rowheads	go to state 5
    rowhead	go to state 6



state 3

    program  ->  TABLE rowheader . rows TABLEEND   (rule 1)

    ROW 	shift, and go to state 7

    rows	go to state 8
    row 	go to state 9



state 4

    rowhead  ->  ROWHEAD . strings   (rule 17)

    STRING	shift, and go to state 10

    strings	go to state 11



state 5

    rowheader  ->  ROW rowheads .   (rule 14)
    rowheads  ->  rowheads . rowhead   (rule 16)

    ROWHEAD	shift, and go to state 4

    ROW 	reduce using rule 14 (rowheader)
    ROW 	[reduce using rule 18 (rowhead)]
    ROWHEAD	[reduce using rule 18 (rowhead)]
    $default	reduce using rule 14 (rowheader)

    rowhead	go to state 12



state 6

    rowheads  ->  rowhead .   (rule 15)

    $default	reduce using rule 15 (rowheads)



state 7

    row  ->  ROW . ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWHEAD	shift, and go to state 13



state 8

    program  ->  TABLE rowheader rows . TABLEEND   (rule 1)

    TABLEEND	shift, and go to state 14



state 9

    rows  ->  row .   (rule 2)
    rows  ->  row . rows   (rule 3)

    ROW 	shift, and go to state 7

    $default	reduce using rule 2 (rows)

    rows	go to state 15
    row 	go to state 9



state 10

    strings  ->  STRING .   (rule 8)
    strings  ->  STRING . strings   (rule 9)
    strings  ->  STRING .   (rule 19)
    strings  ->  STRING . strings   (rule 20)

    STRING	shift, and go to state 10

    TABLEEND	reduce using rule 8 (strings)
    TABLEEND	[reduce using rule 19 (strings)]
    ROW 	reduce using rule 8 (strings)
    ROW 	[reduce using rule 19 (strings)]
    ROWDESC	reduce using rule 8 (strings)
    ROWDESC	[reduce using rule 19 (strings)]
    ROWHEAD	reduce using rule 8 (strings)
    ROWHEAD	[reduce using rule 19 (strings)]
    $default	reduce using rule 8 (strings)

    strings	go to state 16



state 11

    rowhead  ->  ROWHEAD strings .   (rule 17)

    $default	reduce using rule 17 (rowhead)



state 12

    rowheads  ->  rowheads rowhead .   (rule 16)

    $default	reduce using rule 16 (rowheads)



state 13

    row  ->  ROW ROWHEAD . STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 17



state 14

    program  ->  TABLE rowheader rows TABLEEND .   (rule 1)

    $default	reduce using rule 1 (program)



state 15

    rows  ->  row rows .   (rule 3)

    $default	reduce using rule 3 (rows)



state 16

    strings  ->  STRING strings .   (rule 9)
    strings  ->  STRING strings .   (rule 20)

    TABLEEND	reduce using rule 9 (strings)
    TABLEEND	[reduce using rule 20 (strings)]
    ROW 	reduce using rule 9 (strings)
    ROW 	[reduce using rule 20 (strings)]
    ROWDESC	reduce using rule 9 (strings)
    ROWDESC	[reduce using rule 20 (strings)]
    ROWHEAD	reduce using rule 9 (strings)
    ROWHEAD	[reduce using rule 20 (strings)]
    $default	reduce using rule 9 (strings)



state 17

    row  ->  ROW ROWHEAD STRING . @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    $default	reduce using rule 4 (@1)

    @1  	go to state 18



state 18

    row  ->  ROW ROWHEAD STRING @1 . ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 19



state 19

    row  ->  ROW ROWHEAD STRING @1 ROWDESC . val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 20
    FLOAT	shift, and go to state 21

    val1	go to state 22
    val 	go to state 23



state 20

    val  ->  STRING .   (rule 10)

    $default	reduce using rule 10 (val)



state 21

    val  ->  FLOAT .   (rule 11)

    $default	reduce using rule 11 (val)



state 22

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 . ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 24



state 23

    val1  ->  val .   (rule 6)
    val1  ->  val . strings   (rule 7)

    STRING	shift, and go to state 10

    $default	reduce using rule 6 (val1)

    strings	go to state 25



state 24

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC . val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 20
    FLOAT	shift, and go to state 21

    val 	go to state 26



state 25

    val1  ->  val strings .   (rule 7)

    $default	reduce using rule 7 (val1)



state 26

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val . ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 27



state 27

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC . tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 28

    $default	reduce using rule 13 (tijd)

    tijd	go to state 29



state 28

    tijd  ->  STRING .   (rule 12)

    $default	reduce using rule 12 (tijd)



state 29

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd . ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 30



state 30

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC . val ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 20
    FLOAT	shift, and go to state 21

    val 	go to state 31



state 31

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val . ROWDESC val ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 32



state 32

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC . val ROWDESC val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 20
    FLOAT	shift, and go to state 21

    val 	go to state 33



state 33

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val . ROWDESC val1 ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 34



state 34

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC . val1 ROWDESC strings   (rule 5)

    STRING	shift, and go to state 20
    FLOAT	shift, and go to state 21

    val1	go to state 35
    val 	go to state 23



state 35

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 . ROWDESC strings   (rule 5)

    ROWDESC	shift, and go to state 36



state 36

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC . strings   (rule 5)

    STRING	shift, and go to state 10

    strings	go to state 37



state 37

    row  ->  ROW ROWHEAD STRING @1 ROWDESC val1 ROWDESC val ROWDESC tijd ROWDESC val ROWDESC val ROWDESC val1 ROWDESC strings .   (rule 5)

    $default	reduce using rule 5 (row)



state 38

    $   	go to state 39



state 39

    $   	go to state 40



state 40

    $default	accept
