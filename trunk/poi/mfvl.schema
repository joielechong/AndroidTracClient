--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: pois; Type: SCHEMA; Schema: -; Owner: mfvl
--

CREATE SCHEMA pois;


ALTER SCHEMA pois OWNER TO mfvl;

--
-- Name: SCHEMA pois; Type: COMMENT; Schema: -; Owner: mfvl
--

COMMENT ON SCHEMA pois IS 'alle tabellen etc. voor de flitspalen';


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plperl; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plperl;


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = pois, pg_catalog;

--
-- Name: naamrow; Type: TYPE; Schema: pois; Owner: mfvl
--

CREATE TYPE naamrow AS (
	lat double precision,
	lon double precision,
	file text,
	commentaar text,
	naam text
);


ALTER TYPE pois.naamrow OWNER TO mfvl;

--
-- Name: ResetChanged(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION "ResetChanged"() RETURNS void
    AS $$UPDATE pois.posten SET changed = 'No'
WHERE changed= 'Yes'$$
    LANGUAGE sql;


ALTER FUNCTION pois."ResetChanged"() OWNER TO mfvl;

--
-- Name: maaknaam(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION maaknaam() RETURNS "trigger"
    AS $_X$my @naam;

my $lat=$_TD->{new}->{lat};
my $lon = $_TD->{new}->{lon};
my $file = $_TD->{new}->{filename};
my $comment = $_TD->{new}->{descr};

my $naam = "";

if ($file =~ m/.*-Blitzer.*-m_NF.asc/ ) {
    return "SKIP";
} elsif( $file =~ m/Radars-Mobiles.*/) {
    return "SKIP";
} elsif( $file =~ m/.*goedkoper.*/) {
    return "SKIP";
} elsif ($file eq "SCFormat.asc") {
    return "SKIP";
} elsif ($file =~ m/.*-Blitzer-.*.asc/) {
    @naam=split('\|',$comment);
    $naam=$naam[0];
} elsif ($file =~ m/bnl_.*/) {
    @naam=split(']',$comment);
    $naam=$naam[0]."]".$naam[1]."]";
} elsif ($file =~ m/leadtek_.*/) {
    $naam=$comment;
} elsif ($file =~ m/Trajectcontroles .*/) {
    @naam=split(']',$comment);
    $naam=$naam[0]."]".$naam[1]."]";
} elsif( $file =~ m/Flitsservice.*/) {
    $naam = sprintf("flits-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Radars.*/) {
    $naam = sprintf("radar-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Speed_Camera.*/) {
    $naam = sprintf("speed-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Zones.*/) {
    $naam = sprintf("zone-%7.5f-%7.5f",$lon,$lat);
} else {
    $naam=$comment;
}
$comment =~ s/\$0x.*\$//;
$_TD->{new}->{descr} = $comment;
$_TD->{new}->{naam}=$naam;

return "MODIFY";$_X$
    LANGUAGE plperl;


ALTER FUNCTION pois.maaknaam() OWNER TO mfvl;

--
-- Name: setrelid(integer, integer); Type: FUNCTION; Schema: pois; Owner: root
--

CREATE FUNCTION setrelid(integer, integer) RETURNS integer
    AS $_$UPDATE pois.posten set rel_id=$2 where id=$1;
UPDATE pois.posten set changed='y' where id in ($1,$2);
select $1;$_$
    LANGUAGE sql;


ALTER FUNCTION pois.setrelid(integer, integer) OWNER TO root;

SET search_path = public, pg_catalog;

--
-- Name: aantalmail(integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION aantalmail(integer) RETURNS integer
    AS $_$SELECT max(priority) from mail where contact_id = $1$_$
    LANGUAGE sql;


ALTER FUNCTION public.aantalmail(integer) OWNER TO mfvl;

--
-- Name: af_contact_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_del() RETURNS "trigger"
    AS $$begin
	delete from naw where contact_id=old.id;
	delete from catcontact where contact_id=old.id;
	delete from fax where contact_id=old.id;
	delete from telephone where contact_id=old.id;
	delete from mail where contact_id=old.id;
	delete from relaties where contact_id=old.id;
	update relaties set relatie_id = null where relatie_id=old.id;
return old;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_contact_del() OWNER TO mfvl;

--
-- Name: af_contact_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_updtime() RETURNS "trigger"
    AS $$begin
  new.updatetime=now();
  return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_contact_updtime() OWNER TO mfvl;

--
-- Name: af_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime() RETURNS "trigger"
    AS $$begin
  update contacts set updatetime=now() where id=new.contact_id;
  return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_updtime() OWNER TO mfvl;

--
-- Name: af_updtime1(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime1() RETURNS "trigger"
    AS $$begin
  update contacts set updatetime=now() where id=old.contact_id;
  return old;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.af_updtime1() OWNER TO mfvl;

--
-- Name: array_to_set(anyarray); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION array_to_set(arr anyarray) RETURNS SETOF anyelement
    AS $$
BEGIN
    FOR idx IN array_lower(arr, 1)..array_upper(arr, 1) LOOP
        RETURN NEXT arr[idx];
    END LOOP;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.array_to_set(arr anyarray) OWNER TO mfvl;

--
-- Name: getfirstlow(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION getfirstlow(text) RETURNS text
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return substr(lc($value),0,1);
$_$
    LANGUAGE plperl;


ALTER FUNCTION public.getfirstlow(text) OWNER TO mfvl;

--
-- Name: insert_cat(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_cat() RETURNS "trigger"
    AS $$begin
new.class='CAT';
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_cat() OWNER TO mfvl;

--
-- Name: insert_fax(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_fax() RETURNS "trigger"
    AS $$begin
new.class='FAX';
new.number=normtel(new.number);
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_fax() OWNER TO mfvl;

--
-- Name: insert_mail(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_mail() RETURNS "trigger"
    AS $$begin
new.class='MAIL';
new.mailaddress = lower(new.mailaddress);
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_mail() OWNER TO mfvl;

--
-- Name: insert_naw(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_naw() RETURNS "trigger"
    AS $$begin
new.class='NAW';
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_naw() OWNER TO mfvl;

--
-- Name: insert_rek(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_rek() RETURNS "trigger"
    AS $$begin
new.class='REK';
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_rek() OWNER TO mfvl;

--
-- Name: insert_rel(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_rel() RETURNS "trigger"
    AS $$begin
new.class='REL';
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_rel() OWNER TO mfvl;

--
-- Name: insert_tel(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_tel() RETURNS "trigger"
    AS $$begin
new.class='TEL';
new.number=normtel(new.number);
return new;
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.insert_tel() OWNER TO mfvl;

--
-- Name: ldap_create(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_create() RETURNS "trigger"
    AS $$begin
insert into ldap_entries (dn,oc_map_id,parent,keyval) values ('cn='||new.cn||',o=outlook',1,1,new.id);
return new; 
end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_create() OWNER TO mfvl;

--
-- Name: ldap_delete(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_delete() RETURNS "trigger"
    AS $$begin
delete from ldap_entries where keyval = old.id;
return old;
end; $$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_delete() OWNER TO mfvl;

--
-- Name: ldap_update(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_update() RETURNS "trigger"
    AS $$begin
if (old.cn != new.cn) then
update ldap_entries set dn='cn='||new.cn||',o=outlook' where keyval=new.id;
end if;
return new;end;$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.ldap_update() OWNER TO mfvl;

--
-- Name: nonull_append_strings(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION nonull_append_strings(text, text) RETURNS text
    AS $_$select case
when $1 is null then $2
when $2 is null then $1
else $1 || ' ' || $2
end$_$
    LANGUAGE sql IMMUTABLE;


ALTER FUNCTION public.nonull_append_strings(text, text) OWNER TO mfvl;

--
-- Name: normtel(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION normtel(text) RETURNS text
    AS $_$my $nr = shift;

$nr =~s/[ \-\(\)]//g;

return $nr;$_$
    LANGUAGE plperl;


ALTER FUNCTION public.normtel(text) OWNER TO mfvl;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO mfvl;

--
-- Name: tolower(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION tolower(text) RETURNS text
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return lc($value);
$_$
    LANGUAGE plperl;


ALTER FUNCTION public.tolower(text) OWNER TO mfvl;

--
-- Name: update_mail(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION update_mail() RETURNS "trigger"
    AS $$begin
new.mailaddress = lower(new.mailaddress);
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_mail() OWNER TO mfvl;

--
-- Name: update_number(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION update_number() RETURNS "trigger"
    AS $$begin
new.number=normtel(new.number);
return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_number() OWNER TO mfvl;

--
-- Name: ||+; Type: OPERATOR; Schema: public; Owner: mfvl
--

CREATE OPERATOR ||+ (
    PROCEDURE = nonull_append_strings,
    LEFTARG = text,
    RIGHTARG = text
);


ALTER OPERATOR public.||+ (text, text) OWNER TO mfvl;

SET search_path = pois, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: cameratypes; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE cameratypes (
    id integer NOT NULL,
    naam character varying NOT NULL
);


ALTER TABLE pois.cameratypes OWNER TO mfvl;

--
-- Name: close50; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE close50 (
    id1 integer NOT NULL,
    lat1 double precision NOT NULL,
    lon1 double precision NOT NULL,
    id2 integer NOT NULL,
    lat2 double precision NOT NULL,
    lon2 double precision NOT NULL,
    distance double precision NOT NULL,
    file1 character varying NOT NULL,
    rem1 character varying,
    file2 character varying NOT NULL,
    rem2 character varying,
    t1 character varying,
    t2 character varying
);


ALTER TABLE pois.close50 OWNER TO mfvl;

--
-- Name: inputfiles; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE inputfiles (
    id integer NOT NULL,
    naam character varying NOT NULL,
    snelheid integer,
    "type" character varying,
    xmlurl character varying,
    lastupdate timestamp without time zone
);


ALTER TABLE pois.inputfiles OWNER TO mfvl;

--
-- Name: posten; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE posten (
    id integer NOT NULL,
    lon double precision NOT NULL,
    lat double precision NOT NULL,
    commentaar character varying,
    file character varying NOT NULL,
    naam character varying NOT NULL,
    rel_id integer,
    updated boolean,
    changed boolean,
    richting integer,
    bidirectioneel boolean,
    land character varying
);


ALTER TABLE pois.posten OWNER TO mfvl;

--
-- Name: disthelp; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW disthelp AS
    SELECT p.id, p.lon, p.lat, p.commentaar, p.file, i."type", i.snelheid FROM posten p, inputfiles i WHERE ((((p.rel_id IS NULL) AND p.updated) AND ((p.file)::text = (i.naam)::text)) AND (NOT (i."type" IS NULL)));


ALTER TABLE pois.disthelp OWNER TO mfvl;

--
-- Name: disthelp1; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW disthelp1 AS
    SELECT p.lon, p.lat, p.commentaar, p.file FROM posten p WHERE ((p.rel_id IS NULL) AND p.updated);


ALTER TABLE pois.disthelp1 OWNER TO mfvl;

--
-- Name: eigen; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW eigen AS
    SELECT posten.id, posten.lon, posten.lat, posten.commentaar, posten.file, posten.naam, posten.rel_id, posten.updated, posten.changed, posten.richting, posten.bidirectioneel FROM posten posten WHERE ((posten.naam)::text ~~* 'MFVL%'::text) ORDER BY posten.naam DESC;


ALTER TABLE pois.eigen OWNER TO mfvl;

--
-- Name: flitspalen; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW flitspalen AS
    SELECT "if".snelheid, COALESCE("if"."type", 'Overig'::character varying) AS "type", p.lon, p.lat, p.commentaar, p.id, p.rel_id, p.richting, p.bidirectioneel, p.land FROM (inputfiles "if" JOIN posten p ON ((("if".naam)::text = (p.file)::text))) WHERE (((p.rel_id IS NULL) AND (p.updated = true)) AND ((p.file)::text !~~* '%goedkop%'::text)) ORDER BY p.lon, p.lat;


ALTER TABLE pois.flitspalen OWNER TO mfvl;

--
-- Name: inputfiles_id_seq; Type: SEQUENCE; Schema: pois; Owner: mfvl
--

CREATE SEQUENCE inputfiles_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE pois.inputfiles_id_seq OWNER TO mfvl;

--
-- Name: inputfiles_id_seq; Type: SEQUENCE OWNED BY; Schema: pois; Owner: mfvl
--

ALTER SEQUENCE inputfiles_id_seq OWNED BY inputfiles.id;


--
-- Name: poisupdate; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE poisupdate (
    id integer NOT NULL,
    lat double precision NOT NULL,
    ruwedata text,
    veld1 integer,
    veld2 integer,
    veld3 integer,
    veld4 integer,
    lon double precision NOT NULL
);


ALTER TABLE pois.poisupdate OWNER TO mfvl;

--
-- Name: posten_id_seq; Type: SEQUENCE; Schema: pois; Owner: mfvl
--

CREATE SEQUENCE posten_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE pois.posten_id_seq OWNER TO mfvl;

--
-- Name: posten_id_seq; Type: SEQUENCE OWNED BY; Schema: pois; Owner: mfvl
--

ALTER SEQUENCE posten_id_seq OWNED BY posten.id;


--
-- Name: sc; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE sc (
    x double precision,
    y double precision,
    "type" integer,
    speed integer,
    dirtype integer,
    direction integer
);


ALTER TABLE pois.sc OWNER TO mfvl;

--
-- Name: sclocate; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW sclocate AS
    SELECT sc.x, sc.y, sc."type", sc.speed, sc.dirtype, sc.direction, p.id, p.lon, p.lat, p.commentaar, p.file, p.naam, p.rel_id, p.updated, p.changed, p.richting, p.bidirectioneel, p.land FROM sc, posten p WHERE ((((p.file)::text ~~ 'sc%'::text) AND (abs((sc.x - p.lon)) < (0.01)::double precision)) AND (abs((sc.y - p.lat)) < (0.01)::double precision));


ALTER TABLE pois.sclocate OWNER TO mfvl;

--
-- Name: temp; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE "temp" (
    lat double precision,
    lon double precision,
    descr character varying,
    filename character varying,
    naam character varying
);


ALTER TABLE pois."temp" OWNER TO mfvl;

SET search_path = public, pg_catalog;

SET default_with_oids = true;

--
-- Name: adr_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE adr_types (
    adr_type character varying NOT NULL,
    volgorde integer
);


ALTER TABLE public.adr_types OWNER TO mfvl;

--
-- Name: attr; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE attr (
    id integer NOT NULL,
    contact_id integer NOT NULL,
    "class" character varying NOT NULL
);


ALTER TABLE public.attr OWNER TO mfvl;

--
-- Name: attr_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE attr_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.attr_id_seq OWNER TO mfvl;

--
-- Name: attr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE attr_id_seq OWNED BY attr.id;


--
-- Name: contacts; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE contacts (
    id integer NOT NULL,
    fileas character varying NOT NULL,
    naam character varying NOT NULL,
    outlooktime timestamp with time zone,
    voornaam character varying,
    achternaam character varying,
    webpagina character varying,
    company character varying,
    updatetime timestamp with time zone DEFAULT now() NOT NULL,
    cn character varying NOT NULL,
    geslacht character(1),
    uid character varying,
    "password" character varying,
    "function" character varying,
    voorletters character varying,
    tussenvoegsel character varying,
    geboortedatum date,
    CONSTRAINT geslacht CHECK (((geslacht = 'M'::bpchar) OR (geslacht = 'V'::bpchar)))
);


ALTER TABLE public.contacts OWNER TO mfvl;

--
-- Name: naw; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE naw (
    straat character varying,
    provincie character varying,
    postcode character varying,
    stad character varying,
    land character varying DEFAULT 'Nederland'::character varying NOT NULL,
    adr_type character varying,
    standaard boolean DEFAULT false,
    lat double precision,
    lon double precision,
    inmio boolean DEFAULT true
)
INHERITS (attr);


ALTER TABLE public.naw OWNER TO mfvl;

--
-- Name: adres; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW adres AS
    SELECT contacts.naam, naw.straat, naw.postcode, naw.stad, naw.land FROM contacts, naw WHERE (contacts.id = naw.contact_id);


ALTER TABLE public.adres OWNER TO mfvl;

--
-- Name: bev21; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE bev21 (
    name character varying NOT NULL,
    classname character varying,
    aliasname character varying
);


ALTER TABLE public.bev21 OWNER TO mfvl;

--
-- Name: catcontact; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE catcontact (
    cat_id integer
)
INHERITS (attr);


ALTER TABLE public.catcontact OWNER TO mfvl;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE categories (
    id integer NOT NULL,
    categorie character varying
);


ALTER TABLE public.categories OWNER TO mfvl;

--
-- Name: categories_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE categories_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.categories_id_seq OWNER TO mfvl;

--
-- Name: categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE categories_id_seq OWNED BY categories.id;


SET default_with_oids = false;

--
-- Name: chansons; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE chansons (
    id integer NOT NULL,
    fichier text,
    title text,
    artist text,
    album text,
    format text,
    tested integer
);


ALTER TABLE public.chansons OWNER TO mfvl;

--
-- Name: chansons_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE chansons_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.chansons_id_seq OWNER TO mfvl;

--
-- Name: chansons_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE chansons_id_seq OWNED BY chansons.id;


--
-- Name: contacts_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE contacts_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.contacts_id_seq OWNER TO mfvl;

--
-- Name: contacts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE contacts_id_seq OWNED BY contacts.id;


--
-- Name: dankbetuigingen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW dankbetuigingen AS
    SELECT co.naam, na.straat, na.postcode, na.stad, na.provincie, na.land FROM categories ca, catcontact cc, contacts co, naw na WHERE ((((((ca.categorie)::text = 'dank_pa'::text) AND (ca.id = cc.cat_id)) AND (cc.contact_id = co.id)) AND (co.id = na.contact_id)) AND (na.standaard = true)) ORDER BY co.fileas;


ALTER TABLE public.dankbetuigingen OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: mail; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE mail (
    mailaddress character varying,
    priority integer
)
INHERITS (attr);


ALTER TABLE public.mail OWNER TO mfvl;

--
-- Name: email; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW email AS
    SELECT contacts.naam, mail.mailaddress, mail.priority FROM contacts, mail WHERE (contacts.id = mail.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.email OWNER TO mfvl;

--
-- Name: fax; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE fax (
    number character varying NOT NULL,
    fax_type character varying,
    prio integer
)
INHERITS (attr);


ALTER TABLE public.fax OWNER TO mfvl;

--
-- Name: kerstkaart; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW kerstkaart AS
    SELECT contacts.id, contacts.naam, naw.straat, naw.postcode, naw.stad, CASE naw.land WHEN 'Nederland'::text THEN NULL::character varying ELSE naw.land END AS land FROM contacts, naw, catcontact, categories WHERE (((((naw.standaard = true) AND (naw.contact_id = contacts.id)) AND (contacts.id = catcontact.contact_id)) AND (catcontact.cat_id = categories.id)) AND ((categories.categorie)::text = 'kerstkaart'::text)) ORDER BY naw.land, naw.postcode;


ALTER TABLE public.kerstkaart OWNER TO mfvl;

--
-- Name: ldap_attr_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_attr_mappings (
    id integer NOT NULL,
    oc_map_id integer NOT NULL,
    name character varying(255) NOT NULL,
    sel_expr character varying(255) NOT NULL,
    sel_expr_u character varying(255),
    from_tbls character varying(255) NOT NULL,
    join_where character varying(255),
    add_proc character varying(255),
    delete_proc character varying(255),
    param_order integer NOT NULL,
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_attr_mappings OWNER TO mfvl;

--
-- Name: ldap_attr_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_attr_mappings_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_attr_mappings_id_seq OWNER TO mfvl;

--
-- Name: ldap_attr_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_attr_mappings_id_seq OWNED BY ldap_attr_mappings.id;


--
-- Name: ldap_entries; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entries (
    id integer NOT NULL,
    dn character varying(255) NOT NULL,
    oc_map_id integer NOT NULL,
    parent integer NOT NULL,
    keyval integer NOT NULL
);


ALTER TABLE public.ldap_entries OWNER TO mfvl;

--
-- Name: ldap_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_entries_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_entries_id_seq OWNER TO mfvl;

--
-- Name: ldap_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_entries_id_seq OWNED BY ldap_entries.id;


--
-- Name: ldap_entry_objclasses; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entry_objclasses (
    entry_id integer NOT NULL,
    oc_name character varying(64)
);


ALTER TABLE public.ldap_entry_objclasses OWNER TO mfvl;

--
-- Name: ldap_oc_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_oc_mappings (
    id integer NOT NULL,
    name character varying(64) NOT NULL,
    keytbl character varying(64) NOT NULL,
    keycol character varying(64) NOT NULL,
    create_proc character varying(255),
    delete_proc character varying(255),
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_oc_mappings OWNER TO mfvl;

--
-- Name: ldap_oc_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_oc_mappings_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_oc_mappings_id_seq OWNER TO mfvl;

--
-- Name: ldap_oc_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_oc_mappings_id_seq OWNED BY ldap_oc_mappings.id;


--
-- Name: rekeningnummer; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE rekeningnummer (
    rekeniningnummer character varying NOT NULL,
    naamstelling character varying
)
INHERITS (attr);


ALTER TABLE public.rekeningnummer OWNER TO mfvl;

--
-- Name: relaties; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relaties (
    naam character varying,
    relatie character varying,
    relatie_id integer
)
INHERITS (attr);


ALTER TABLE public.relaties OWNER TO mfvl;

--
-- Name: relatievormen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relatievormen (
    relatie character varying NOT NULL
);


ALTER TABLE public.relatievormen OWNER TO mfvl;

--
-- Name: sendmailmta; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmta (
    id integer NOT NULL,
    mtacluster character varying DEFAULT 'Servers'::character varying,
    mtahost character varying,
    description character varying
);


ALTER TABLE public.sendmailmta OWNER TO mfvl;

--
-- Name: sendmailmta_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE sendmailmta_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.sendmailmta_id_seq OWNER TO mfvl;

--
-- Name: sendmailmta_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE sendmailmta_id_seq OWNED BY sendmailmta.id;


--
-- Name: sendmailmtaalias; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaalias (
    mtaaliasgrouping character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtaalias OWNER TO mfvl;

--
-- Name: sendmailmtaaliasobject; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaaliasobject (
    mtakey character varying NOT NULL,
    mtaaliasvalue character varying
)
INHERITS (sendmailmtaalias);


ALTER TABLE public.sendmailmtaaliasobject OWNER TO mfvl;

--
-- Name: sendmailmtaclass; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaclass (
    mtaclassname character varying NOT NULL,
    mtaclassvalue character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtaclass OWNER TO mfvl;

--
-- Name: sendmailmtamap; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtamap (
    mtamapname character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtamap OWNER TO mfvl;

--
-- Name: sendmailmtamapobject; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtamapobject (
    mtakey character varying,
    mtamapvalue character varying
)
INHERITS (sendmailmtamap);


ALTER TABLE public.sendmailmtamapobject OWNER TO mfvl;

--
-- Name: tel_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE tel_types (
    tel_type character varying NOT NULL
);


ALTER TABLE public.tel_types OWNER TO mfvl;

--
-- Name: telephone; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telephone (
    number character varying,
    tel_type character varying,
    prio integer,
    list boolean DEFAULT true
)
INHERITS (attr);


ALTER TABLE public.telephone OWNER TO mfvl;

--
-- Name: telfort; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort (
    tijd timestamp without time zone,
    "type" character varying,
    nummer character varying,
    bedrag bigint,
    mb double precision,
    duur integer,
    bundel boolean
);


ALTER TABLE public.telfort OWNER TO mfvl;

--
-- Name: telfort_namen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_namen (
    nummer character varying NOT NULL,
    naam character varying,
    list boolean DEFAULT true
);


ALTER TABLE public.telfort_namen OWNER TO mfvl;

--
-- Name: telnummer; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW telnummer AS
    SELECT contacts.naam, telephone.number, telephone.tel_type, telephone.list FROM contacts, telephone WHERE (contacts.id = telephone.contact_id);


ALTER TABLE public.telnummer OWNER TO mfvl;

--
-- Name: telfort_allenamen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW telfort_allenamen AS
    SELECT telfort_namen.naam, telfort_namen.nummer, telfort_namen.list FROM telfort_namen UNION SELECT telnummer.naam, telnummer.number AS nummer, telnummer.list FROM telnummer;


ALTER TABLE public.telfort_allenamen OWNER TO mfvl;

--
-- Name: telfort_vertaal; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_vertaal (
    nummer character varying NOT NULL,
    nummer_vertaald character varying
);


ALTER TABLE public.telfort_vertaal OWNER TO mfvl;

--
-- Name: telfort_zakelijk; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_zakelijk (
    naam character varying NOT NULL,
    zakelijk boolean DEFAULT false NOT NULL
);


ALTER TABLE public.telfort_zakelijk OWNER TO mfvl;

--
-- Name: tijdelijk; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE tijdelijk (
    voornaam character varying,
    achternaam character varying,
    bedrijf character varying,
    adres character varying,
    postcode character varying,
    plaats character varying,
    procincie character varying,
    land character varying,
    contact_id integer
);


ALTER TABLE public.tijdelijk OWNER TO mfvl;

SET search_path = pois, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: pois; Owner: mfvl
--

ALTER TABLE inputfiles ALTER COLUMN id SET DEFAULT nextval('inputfiles_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: pois; Owner: mfvl
--

ALTER TABLE posten ALTER COLUMN id SET DEFAULT nextval('posten_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE attr ALTER COLUMN id SET DEFAULT nextval('attr_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE categories ALTER COLUMN id SET DEFAULT nextval('categories_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE chansons ALTER COLUMN id SET DEFAULT nextval('chansons_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE contacts ALTER COLUMN id SET DEFAULT nextval('contacts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_attr_mappings ALTER COLUMN id SET DEFAULT nextval('ldap_attr_mappings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_entries ALTER COLUMN id SET DEFAULT nextval('ldap_entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_oc_mappings ALTER COLUMN id SET DEFAULT nextval('ldap_oc_mappings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE sendmailmta ALTER COLUMN id SET DEFAULT nextval('sendmailmta_id_seq'::regclass);


SET search_path = pois, pg_catalog;

--
-- Name: cameratypes_naam_key; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY cameratypes
    ADD CONSTRAINT cameratypes_naam_key UNIQUE (naam);


--
-- Name: close50_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY close50
    ADD CONSTRAINT close50_pkey PRIMARY KEY (id1, id2);


--
-- Name: inputfiles_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY inputfiles
    ADD CONSTRAINT inputfiles_pkey PRIMARY KEY (naam);


--
-- Name: poisupdate_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY poisupdate
    ADD CONSTRAINT poisupdate_pkey PRIMARY KEY (id);


--
-- Name: posten_naam_key; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_naam_key UNIQUE (naam);


--
-- Name: posten_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_pkey PRIMARY KEY (id);


SET search_path = public, pg_catalog;

--
-- Name: adr_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY adr_types
    ADD CONSTRAINT adr_types_pkey PRIMARY KEY (adr_type);


--
-- Name: adr_types_volgorde_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY adr_types
    ADD CONSTRAINT adr_types_volgorde_key UNIQUE (volgorde);


--
-- Name: attr_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY attr
    ADD CONSTRAINT attr_pkey PRIMARY KEY (id);


--
-- Name: bev21_aliasname_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY bev21
    ADD CONSTRAINT bev21_aliasname_key UNIQUE (aliasname);


--
-- Name: bev21_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY bev21
    ADD CONSTRAINT bev21_pkey PRIMARY KEY (name);


--
-- Name: catcontact_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_contact_id_key UNIQUE (contact_id, cat_id);


--
-- Name: categories_categorie_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_categorie_key UNIQUE (categorie);


--
-- Name: categories_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- Name: chansons_fichier_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY chansons
    ADD CONSTRAINT chansons_fichier_key UNIQUE (fichier);


--
-- Name: chansons_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY chansons
    ADD CONSTRAINT chansons_pkey PRIMARY KEY (id);


--
-- Name: contacts_fileas_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_fileas_key UNIQUE (fileas);


--
-- Name: contacts_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_pkey PRIMARY KEY (id);


--
-- Name: contacts_uid_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_uid_key UNIQUE (uid);


--
-- Name: fax_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_key UNIQUE (contact_id, fax_type, prio);


--
-- Name: fax_contact_id_key1; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_key1 UNIQUE (contact_id, number, fax_type);


--
-- Name: ldap_attr_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_pkey PRIMARY KEY (id);


--
-- Name: ldap_entries_dn_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_dn_key UNIQUE (dn);


--
-- Name: ldap_entries_oc_map_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_key UNIQUE (oc_map_id, keyval);


--
-- Name: ldap_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_pkey PRIMARY KEY (id);


--
-- Name: ldap_oc_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_oc_mappings
    ADD CONSTRAINT ldap_oc_mappings_pkey PRIMARY KEY (id);


--
-- Name: mail_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_contact_id_key UNIQUE (contact_id, priority);


--
-- Name: mail_mailaddress_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_mailaddress_key UNIQUE (mailaddress);


--
-- Name: rekeningnummer_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY rekeningnummer
    ADD CONSTRAINT rekeningnummer_pkey PRIMARY KEY (contact_id, rekeniningnummer);


--
-- Name: relatievormen_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY relatievormen
    ADD CONSTRAINT relatievormen_pkey PRIMARY KEY (relatie);


--
-- Name: sendmailmta_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY sendmailmta
    ADD CONSTRAINT sendmailmta_pkey PRIMARY KEY (id);


--
-- Name: sendmailmtaaliasobject_mtakey_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY sendmailmtaaliasobject
    ADD CONSTRAINT sendmailmtaaliasobject_mtakey_key UNIQUE (mtakey);


--
-- Name: tel_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY tel_types
    ADD CONSTRAINT tel_types_pkey PRIMARY KEY (tel_type);


--
-- Name: telephone_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_key UNIQUE (contact_id, number, tel_type);


--
-- Name: telephone_contact_id_key1; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_key1 UNIQUE (contact_id, number, tel_type);


--
-- Name: teleprio; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT teleprio UNIQUE (contact_id, tel_type, prio);


--
-- Name: telfort_namen_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_namen
    ADD CONSTRAINT telfort_namen_pkey PRIMARY KEY (nummer);


--
-- Name: telfort_vertaal_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_vertaal
    ADD CONSTRAINT telfort_vertaal_pkey PRIMARY KEY (nummer);


--
-- Name: telfort_zakelijk_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_zakelijk
    ADD CONSTRAINT telfort_zakelijk_pkey PRIMARY KEY (naam);


--
-- Name: uninaw; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT uninaw UNIQUE (contact_id, adr_type);


SET search_path = pois, pg_catalog;

--
-- Name: if_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX if_001 ON inputfiles USING btree ("type");


--
-- Name: if_002; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX if_002 ON inputfiles USING btree (snelheid);


--
-- Name: if_003; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX if_003 ON inputfiles USING btree (id);


--
-- Name: inputfiles_type; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX inputfiles_type ON inputfiles USING btree ("type");


--
-- Name: posten_commentaar_key; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_commentaar_key ON posten USING btree (commentaar);


--
-- Name: posten_file_key; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_file_key ON posten USING btree (file);


--
-- Name: posten_lat_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_lat_001 ON posten USING btree (lat);


--
-- Name: posten_latlon_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_latlon_001 ON posten USING btree (lon, lat);


--
-- Name: posten_lon_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_lon_001 ON posten USING btree (lon);


--
-- Name: posten_rel_id_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_rel_id_001 ON posten USING btree (rel_id) WHERE (rel_id IS NULL);


SET search_path = public, pg_catalog;

--
-- Name: catcontact_cat_id; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX catcontact_cat_id ON catcontact USING btree (cat_id);


--
-- Name: catcontact_contact_id; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX catcontact_contact_id ON catcontact USING btree (contact_id);


--
-- Name: contacts_achternaam; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX contacts_achternaam ON contacts USING btree (achternaam);


--
-- Name: contacts_cn; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX contacts_cn ON contacts USING btree (cn);


--
-- Name: telfort_001; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX telfort_001 ON telfort USING btree (tijd, "type", nummer);


--
-- Name: telfort_002; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX telfort_002 ON telfort USING btree (tijd, "type", bedrag) WHERE (("type")::text = 'GPRS dataverkeer'::text);


--
-- Name: email_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_del AS ON DELETE TO email DO INSTEAD DELETE FROM mail USING contacts c WHERE (((((c.naam)::text = (old.naam)::text) AND (c.id = m.contact_id)) AND ((m.mailaddress)::text = (old.mailaddress)::text)) AND (m.priority = old.priority));


--
-- Name: email_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_ins AS ON INSERT TO email DO INSTEAD INSERT INTO mail (contact_id, mailaddress, priority) SELECT c.id, new.mailaddress, new.priority FROM contacts c WHERE ((c.naam)::text = (new.naam)::text);


--
-- Name: email_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_upd AS ON UPDATE TO email DO INSTEAD UPDATE mail SET priority = new.priority, mailaddress = new.mailaddress FROM contacts c WHERE (((((old.naam)::text = (c.naam)::text) AND (c.id = m.contact_id)) AND ((old.mailaddress)::text = (m.mailaddress)::text)) AND (m.priority = old.priority));


--
-- Name: insert_telnummer; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE insert_telnummer AS ON INSERT TO telnummer DO INSTEAD INSERT INTO telephone (number, contact_id, tel_type, list) SELECT new.number, c.id, new.tel_type, new.list FROM contacts c WHERE ((c.naam)::text = (new.naam)::text);


SET search_path = pois, pg_catalog;

--
-- Name: maaknaam; Type: TRIGGER; Schema: pois; Owner: mfvl
--

CREATE TRIGGER maaknaam
    BEFORE INSERT OR UPDATE ON "temp"
    FOR EACH ROW
    EXECUTE PROCEDURE maaknaam();


SET search_path = public, pg_catalog;

--
-- Name: af_attr_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_del
    BEFORE DELETE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_attr_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_upd
    BEFORE INSERT OR UPDATE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_cat_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_del
    BEFORE DELETE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_cat_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_upd
    BEFORE INSERT OR UPDATE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_contact_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_del
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_del();


--
-- Name: af_contact_updtime; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_updtime
    BEFORE INSERT OR UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_updtime();


--
-- Name: af_fax_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_del
    BEFORE DELETE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_fax_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_upd
    BEFORE INSERT OR UPDATE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_mail_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_del
    BEFORE DELETE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_mail_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_upd
    BEFORE INSERT OR UPDATE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_naw_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_del
    BEFORE DELETE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_naw_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_upd
    BEFORE INSERT OR UPDATE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_rel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_del
    BEFORE DELETE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_rel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_upd
    BEFORE INSERT OR UPDATE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_tel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_del
    BEFORE DELETE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_tel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_upd
    BEFORE INSERT OR UPDATE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: insert_cat; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_cat
    BEFORE INSERT ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE insert_cat();


--
-- Name: insert_fax; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_fax
    BEFORE INSERT ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE insert_fax();


--
-- Name: insert_mail; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_mail
    BEFORE INSERT ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE insert_mail();


--
-- Name: insert_naw; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_naw
    BEFORE INSERT ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE insert_naw();


--
-- Name: insert_rek; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_rek
    BEFORE INSERT ON rekeningnummer
    FOR EACH ROW
    EXECUTE PROCEDURE insert_rek();


--
-- Name: insert_rel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_rel
    BEFORE INSERT ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE insert_rel();


--
-- Name: insert_tel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_tel
    BEFORE INSERT ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE insert_tel();


--
-- Name: ldap_create; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_create
    AFTER INSERT ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_create();


--
-- Name: ldap_delete; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_delete
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_delete();


--
-- Name: ldap_update; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_update
    AFTER UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_update();


--
-- Name: update_fax; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_fax
    BEFORE UPDATE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE update_number();


--
-- Name: update_mail; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_mail
    BEFORE UPDATE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE update_mail();


--
-- Name: update_tel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_tel
    BEFORE UPDATE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE update_number();


SET search_path = pois, pg_catalog;

--
-- Name: posten_file_fkey; Type: FK CONSTRAINT; Schema: pois; Owner: mfvl
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_file_fkey FOREIGN KEY (file) REFERENCES inputfiles(naam);


SET search_path = public, pg_catalog;

--
-- Name: adr_type; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT adr_type FOREIGN KEY (adr_type) REFERENCES adr_types(adr_type);


--
-- Name: catcontact_cat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_cat_id_fkey FOREIGN KEY (cat_id) REFERENCES categories(id);


--
-- Name: catcontact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: fax_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: fax_fax_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_fax_type_fkey FOREIGN KEY (fax_type) REFERENCES tel_types(tel_type);


--
-- Name: ldap_attr_mappings_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entries_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entry_objclasses_entry_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entry_objclasses
    ADD CONSTRAINT ldap_entry_objclasses_entry_id_fkey FOREIGN KEY (entry_id) REFERENCES ldap_entries(id);


--
-- Name: mail_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: naw_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT naw_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: rekeningnummer_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY rekeningnummer
    ADD CONSTRAINT rekeningnummer_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: relaties_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: relaties_relatie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_fkey FOREIGN KEY (relatie) REFERENCES relatievormen(relatie);


--
-- Name: relaties_relatie_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_id_fkey FOREIGN KEY (relatie_id) REFERENCES contacts(id);


--
-- Name: telephone_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: telephone_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_type_fkey FOREIGN KEY (tel_type) REFERENCES tel_types(tel_type);


--
-- Name: pois; Type: ACL; Schema: -; Owner: mfvl
--

REVOKE ALL ON SCHEMA pois FROM PUBLIC;
REVOKE ALL ON SCHEMA pois FROM mfvl;
GRANT ALL ON SCHEMA pois TO mfvl;
GRANT ALL ON SCHEMA pois TO httpd;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;
GRANT ALL ON SCHEMA public TO httpd;


SET search_path = pois, pg_catalog;

--
-- Name: cameratypes; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE cameratypes FROM PUBLIC;
REVOKE ALL ON TABLE cameratypes FROM mfvl;
GRANT ALL ON TABLE cameratypes TO mfvl;
GRANT ALL ON TABLE cameratypes TO httpd;


--
-- Name: close50; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE close50 FROM PUBLIC;
REVOKE ALL ON TABLE close50 FROM mfvl;
GRANT ALL ON TABLE close50 TO mfvl;
GRANT ALL ON TABLE close50 TO httpd;


--
-- Name: inputfiles; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE inputfiles FROM PUBLIC;
REVOKE ALL ON TABLE inputfiles FROM mfvl;
GRANT ALL ON TABLE inputfiles TO mfvl;
GRANT ALL ON TABLE inputfiles TO httpd;


--
-- Name: posten; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE posten FROM PUBLIC;
REVOKE ALL ON TABLE posten FROM mfvl;
GRANT ALL ON TABLE posten TO mfvl;
GRANT ALL ON TABLE posten TO httpd;


--
-- Name: disthelp; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE disthelp FROM PUBLIC;
REVOKE ALL ON TABLE disthelp FROM mfvl;
GRANT ALL ON TABLE disthelp TO mfvl;
GRANT ALL ON TABLE disthelp TO httpd;


--
-- Name: disthelp1; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE disthelp1 FROM PUBLIC;
REVOKE ALL ON TABLE disthelp1 FROM mfvl;
GRANT ALL ON TABLE disthelp1 TO mfvl;
GRANT ALL ON TABLE disthelp1 TO httpd;


--
-- Name: eigen; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE eigen FROM PUBLIC;
REVOKE ALL ON TABLE eigen FROM mfvl;
GRANT ALL ON TABLE eigen TO mfvl;
GRANT ALL ON TABLE eigen TO httpd;


--
-- Name: flitspalen; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE flitspalen FROM PUBLIC;
REVOKE ALL ON TABLE flitspalen FROM mfvl;
GRANT ALL ON TABLE flitspalen TO mfvl;
GRANT ALL ON TABLE flitspalen TO httpd;


--
-- Name: inputfiles_id_seq; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON SEQUENCE inputfiles_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE inputfiles_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE inputfiles_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE inputfiles_id_seq TO httpd;


--
-- Name: poisupdate; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE poisupdate FROM PUBLIC;
REVOKE ALL ON TABLE poisupdate FROM mfvl;
GRANT ALL ON TABLE poisupdate TO mfvl;
GRANT ALL ON TABLE poisupdate TO httpd;


--
-- Name: posten_id_seq; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON SEQUENCE posten_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE posten_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE posten_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE posten_id_seq TO httpd;


--
-- Name: temp; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE "temp" FROM PUBLIC;
REVOKE ALL ON TABLE "temp" FROM mfvl;
GRANT ALL ON TABLE "temp" TO mfvl;
GRANT ALL ON TABLE "temp" TO httpd;


SET search_path = public, pg_catalog;

--
-- Name: adr_types; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE adr_types FROM PUBLIC;
REVOKE ALL ON TABLE adr_types FROM mfvl;
GRANT ALL ON TABLE adr_types TO mfvl;
GRANT ALL ON TABLE adr_types TO httpd;
GRANT ALL ON TABLE adr_types TO "Admin";


--
-- Name: attr; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE attr FROM PUBLIC;
REVOKE ALL ON TABLE attr FROM mfvl;
GRANT ALL ON TABLE attr TO mfvl;
GRANT ALL ON TABLE attr TO httpd;


--
-- Name: attr_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE attr_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE attr_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE attr_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE attr_id_seq TO httpd;


--
-- Name: contacts; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE contacts FROM PUBLIC;
REVOKE ALL ON TABLE contacts FROM mfvl;
GRANT ALL ON TABLE contacts TO httpd;
GRANT ALL ON TABLE contacts TO "Admin";


--
-- Name: naw; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE naw FROM PUBLIC;
REVOKE ALL ON TABLE naw FROM mfvl;
GRANT ALL ON TABLE naw TO mfvl;
GRANT ALL ON TABLE naw TO httpd;
GRANT ALL ON TABLE naw TO "Admin";


--
-- Name: adres; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE adres FROM PUBLIC;
REVOKE ALL ON TABLE adres FROM mfvl;
GRANT ALL ON TABLE adres TO mfvl;
GRANT ALL ON TABLE adres TO httpd;


--
-- Name: bev21; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE bev21 FROM PUBLIC;
REVOKE ALL ON TABLE bev21 FROM mfvl;
GRANT ALL ON TABLE bev21 TO mfvl;
GRANT ALL ON TABLE bev21 TO httpd;


--
-- Name: catcontact; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE catcontact FROM PUBLIC;
REVOKE ALL ON TABLE catcontact FROM mfvl;
GRANT ALL ON TABLE catcontact TO mfvl;
GRANT ALL ON TABLE catcontact TO httpd;
GRANT ALL ON TABLE catcontact TO "Admin";


--
-- Name: categories; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE categories FROM PUBLIC;
REVOKE ALL ON TABLE categories FROM mfvl;
GRANT ALL ON TABLE categories TO mfvl;
GRANT ALL ON TABLE categories TO httpd;
GRANT ALL ON TABLE categories TO "Admin";


--
-- Name: categories_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE categories_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE categories_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE categories_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE categories_id_seq TO httpd;


--
-- Name: chansons; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE chansons FROM PUBLIC;
REVOKE ALL ON TABLE chansons FROM mfvl;
GRANT ALL ON TABLE chansons TO mfvl;
GRANT ALL ON TABLE chansons TO httpd;


--
-- Name: chansons_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE chansons_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE chansons_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE chansons_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE chansons_id_seq TO httpd;


--
-- Name: contacts_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE contacts_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contacts_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE contacts_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE contacts_id_seq TO httpd;


--
-- Name: dankbetuigingen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE dankbetuigingen FROM PUBLIC;
REVOKE ALL ON TABLE dankbetuigingen FROM mfvl;
GRANT ALL ON TABLE dankbetuigingen TO mfvl;
GRANT ALL ON TABLE dankbetuigingen TO httpd;


--
-- Name: mail; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE mail FROM PUBLIC;
REVOKE ALL ON TABLE mail FROM mfvl;
GRANT ALL ON TABLE mail TO mfvl;
GRANT ALL ON TABLE mail TO httpd;
GRANT ALL ON TABLE mail TO "Admin";


--
-- Name: email; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE email FROM PUBLIC;
REVOKE ALL ON TABLE email FROM mfvl;
GRANT ALL ON TABLE email TO mfvl;
GRANT ALL ON TABLE email TO httpd;


--
-- Name: fax; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE fax FROM PUBLIC;
REVOKE ALL ON TABLE fax FROM mfvl;
GRANT ALL ON TABLE fax TO mfvl;
GRANT ALL ON TABLE fax TO httpd;
GRANT ALL ON TABLE fax TO "Admin";


--
-- Name: kerstkaart; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE kerstkaart FROM PUBLIC;
REVOKE ALL ON TABLE kerstkaart FROM mfvl;
GRANT ALL ON TABLE kerstkaart TO mfvl;
GRANT ALL ON TABLE kerstkaart TO httpd;


--
-- Name: ldap_attr_mappings; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_attr_mappings FROM PUBLIC;
REVOKE ALL ON TABLE ldap_attr_mappings FROM mfvl;
GRANT ALL ON TABLE ldap_attr_mappings TO mfvl;
GRANT ALL ON TABLE ldap_attr_mappings TO httpd;


--
-- Name: ldap_attr_mappings_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_attr_mappings_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_attr_mappings_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_attr_mappings_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_attr_mappings_id_seq TO httpd;


--
-- Name: ldap_entries; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_entries FROM PUBLIC;
REVOKE ALL ON TABLE ldap_entries FROM mfvl;
GRANT ALL ON TABLE ldap_entries TO mfvl;
GRANT ALL ON TABLE ldap_entries TO httpd;


--
-- Name: ldap_entries_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_entries_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_entries_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_entries_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_entries_id_seq TO httpd;


--
-- Name: ldap_entry_objclasses; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_entry_objclasses FROM PUBLIC;
REVOKE ALL ON TABLE ldap_entry_objclasses FROM mfvl;
GRANT ALL ON TABLE ldap_entry_objclasses TO mfvl;
GRANT ALL ON TABLE ldap_entry_objclasses TO httpd;


--
-- Name: ldap_oc_mappings; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_oc_mappings FROM PUBLIC;
REVOKE ALL ON TABLE ldap_oc_mappings FROM mfvl;
GRANT ALL ON TABLE ldap_oc_mappings TO mfvl;
GRANT ALL ON TABLE ldap_oc_mappings TO httpd;


--
-- Name: ldap_oc_mappings_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_oc_mappings_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_oc_mappings_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_oc_mappings_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_oc_mappings_id_seq TO httpd;


--
-- Name: rekeningnummer; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE rekeningnummer FROM PUBLIC;
REVOKE ALL ON TABLE rekeningnummer FROM mfvl;
GRANT ALL ON TABLE rekeningnummer TO mfvl;
GRANT ALL ON TABLE rekeningnummer TO httpd;
GRANT ALL ON TABLE rekeningnummer TO "Admin";


--
-- Name: relaties; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE relaties FROM PUBLIC;
REVOKE ALL ON TABLE relaties FROM mfvl;
GRANT ALL ON TABLE relaties TO mfvl;
GRANT ALL ON TABLE relaties TO httpd;
GRANT ALL ON TABLE relaties TO "Admin";


--
-- Name: relatievormen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE relatievormen FROM PUBLIC;
REVOKE ALL ON TABLE relatievormen FROM mfvl;
GRANT ALL ON TABLE relatievormen TO mfvl;
GRANT ALL ON TABLE relatievormen TO httpd;
GRANT ALL ON TABLE relatievormen TO "Admin";


--
-- Name: sendmailmta; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmta FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmta FROM mfvl;
GRANT ALL ON TABLE sendmailmta TO mfvl;
GRANT ALL ON TABLE sendmailmta TO httpd;


--
-- Name: sendmailmta_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE sendmailmta_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sendmailmta_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE sendmailmta_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE sendmailmta_id_seq TO httpd;


--
-- Name: sendmailmtaalias; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaalias FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaalias FROM mfvl;
GRANT ALL ON TABLE sendmailmtaalias TO mfvl;
GRANT ALL ON TABLE sendmailmtaalias TO httpd;


--
-- Name: sendmailmtaaliasobject; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaaliasobject FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaaliasobject FROM mfvl;
GRANT ALL ON TABLE sendmailmtaaliasobject TO mfvl;
GRANT ALL ON TABLE sendmailmtaaliasobject TO httpd;


--
-- Name: sendmailmtaclass; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaclass FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaclass FROM mfvl;
GRANT ALL ON TABLE sendmailmtaclass TO mfvl;
GRANT ALL ON TABLE sendmailmtaclass TO httpd;


--
-- Name: sendmailmtamap; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtamap FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtamap FROM mfvl;
GRANT ALL ON TABLE sendmailmtamap TO mfvl;
GRANT ALL ON TABLE sendmailmtamap TO httpd;


--
-- Name: sendmailmtamapobject; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtamapobject FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtamapobject FROM mfvl;
GRANT ALL ON TABLE sendmailmtamapobject TO mfvl;
GRANT ALL ON TABLE sendmailmtamapobject TO httpd;


--
-- Name: tel_types; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE tel_types FROM PUBLIC;
REVOKE ALL ON TABLE tel_types FROM mfvl;
GRANT ALL ON TABLE tel_types TO mfvl;
GRANT ALL ON TABLE tel_types TO httpd;
GRANT ALL ON TABLE tel_types TO "Admin";


--
-- Name: telephone; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telephone FROM PUBLIC;
REVOKE ALL ON TABLE telephone FROM mfvl;
GRANT ALL ON TABLE telephone TO mfvl;
GRANT ALL ON TABLE telephone TO httpd;
GRANT ALL ON TABLE telephone TO "Admin";


--
-- Name: telfort; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort FROM PUBLIC;
REVOKE ALL ON TABLE telfort FROM mfvl;
GRANT ALL ON TABLE telfort TO mfvl;
GRANT ALL ON TABLE telfort TO httpd;


--
-- Name: telfort_namen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_namen FROM PUBLIC;
REVOKE ALL ON TABLE telfort_namen FROM mfvl;
GRANT ALL ON TABLE telfort_namen TO mfvl;
GRANT ALL ON TABLE telfort_namen TO httpd;


--
-- Name: telnummer; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telnummer FROM PUBLIC;
REVOKE ALL ON TABLE telnummer FROM mfvl;
GRANT ALL ON TABLE telnummer TO mfvl;
GRANT ALL ON TABLE telnummer TO httpd;


--
-- Name: telfort_allenamen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_allenamen FROM PUBLIC;
REVOKE ALL ON TABLE telfort_allenamen FROM mfvl;
GRANT ALL ON TABLE telfort_allenamen TO mfvl;
GRANT ALL ON TABLE telfort_allenamen TO httpd;


--
-- Name: telfort_vertaal; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_vertaal FROM PUBLIC;
REVOKE ALL ON TABLE telfort_vertaal FROM mfvl;
GRANT ALL ON TABLE telfort_vertaal TO mfvl;
GRANT ALL ON TABLE telfort_vertaal TO httpd;


--
-- Name: telfort_zakelijk; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_zakelijk FROM PUBLIC;
REVOKE ALL ON TABLE telfort_zakelijk FROM mfvl;
GRANT ALL ON TABLE telfort_zakelijk TO mfvl;
GRANT ALL ON TABLE telfort_zakelijk TO httpd;


--
-- Name: tijdelijk; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE tijdelijk FROM PUBLIC;
REVOKE ALL ON TABLE tijdelijk FROM mfvl;
GRANT ALL ON TABLE tijdelijk TO mfvl;
GRANT ALL ON TABLE tijdelijk TO httpd;


--
-- PostgreSQL database dump complete
--

