--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: ms; Type: SCHEMA; Schema: -; Owner: mfvl
--

CREATE SCHEMA ms;


ALTER SCHEMA ms OWNER TO mfvl;

--
-- Name: pois; Type: SCHEMA; Schema: -; Owner: mfvl
--

CREATE SCHEMA pois;


ALTER SCHEMA pois OWNER TO mfvl;

--
-- Name: SCHEMA pois; Type: COMMENT; Schema: -; Owner: mfvl
--

COMMENT ON SCHEMA pois IS 'alle tabellen etc. voor de flitspalen';


--
-- Name: plperl; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plperl;


ALTER PROCEDURAL LANGUAGE plperl OWNER TO postgres;

--
-- Name: plperlu; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plperlu;


ALTER PROCEDURAL LANGUAGE plperlu OWNER TO postgres;

--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plpgsql;


ALTER PROCEDURAL LANGUAGE plpgsql OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: testrowperl; Type: TYPE; Schema: public; Owner: mfvl
--

CREATE TYPE testrowperl AS (
	f1 integer,
	f2 text,
	f3 text
);


ALTER TYPE public.testrowperl OWNER TO mfvl;

SET search_path = pois, pg_catalog;

--
-- Name: ResetChanged(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION "ResetChanged"() RETURNS void
    LANGUAGE sql
    AS $$UPDATE pois.posten SET changed = 'No'
WHERE changed= 'Yes'$$;


ALTER FUNCTION pois."ResetChanged"() OWNER TO mfvl;

--
-- Name: create_poi(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION create_poi() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
  new.insert_date:=now();
  new.update_date:=now();
  new.changed:='t';
  new.updated:='t';
  if new.land is null then
	select land into new.land from pois.inputfiles where naam=new.file;
  end if;
  return new;
end;$$;


ALTER FUNCTION pois.create_poi() OWNER TO mfvl;

--
-- Name: maaknaam(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION maaknaam() RETURNS trigger
    LANGUAGE plperl
    AS $_X$my @naam;

my $lat=$_TD->{new}->{lat};
my $lon = $_TD->{new}->{lon};
my $file = $_TD->{new}->{filename};
my $comment = $_TD->{new}->{descr};

my $naam = "";

if ($file =~ m/.*-Blitzer.*-m_NF.asc/ ) {
    return "SKIP";
} elsif( $file =~ m/Radars-Mobiles.*/) {
    return "SKIP";
} elsif( $file =~ m/.*goedkoper.*/) {
    return "SKIP";
} elsif ($file eq "SCFormat.asc") {
    return "SKIP";
} elsif ($file =~ m/.*-Blitzer-.*.asc/) {
    my @temp=split('/',$file);
    my @t1 = split('-',$temp[1]);
    my $land = $t1[0];
    @naam=split('\|',$comment);
    $naam=$land."-".$naam[0];
} elsif ($file =~ m/bnl_.*/) {
    @naam=split(']',$comment);
    $naam=$naam[0]."]".$naam[1]."]";
} elsif ($file =~ m/leadtek_.*/) {
    $naam=$comment;
} elsif ($file =~ m/Trajectcontroles .*/) {
    @naam=split(']',$comment);
    $naam=$naam[0]."]".$naam[1]."]";
} elsif( $file =~ m/Flitsservice.*/) {
    $naam = sprintf("flits-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Radars.*/) {
    $naam = sprintf("radar-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Speed_Camera.*/) {
    $naam = sprintf("speed-%7.5f-%7.5f",$lon,$lat);
} elsif( $file =~ m/Zones.*/) {
    $naam = sprintf("zone-%7.5f-%7.5f",$lon,$lat);
} else {
    $naam=$comment;
}
$comment =~ s/\$0x.*\$//;
$_TD->{new}->{descr} = $comment;
$_TD->{new}->{naam}=$naam;

return "MODIFY";$_X$;


ALTER FUNCTION pois.maaknaam() OWNER TO mfvl;

--
-- Name: mtcstring(character varying, integer, integer, integer, boolean); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION mtcstring(character varying, integer, integer, integer, boolean) RETURNS character varying
    LANGUAGE plperl
    AS $_$my $type=shift;
my $id=shift;
my $snelheid=shift;
my $richting=shift;
my $bidirectioneel=shift;

my %typconv=("roodlicht"=>"REDLIGHT",
			  "snelheid"=>"GATSO",
			  "mobiel"=>"MOBILE",
			  "afstand"=>"DISTANCE",
			  "traject"=>"SPECS",
			  "trajectstart"=>"SPECS",
			  "trajecteind"=>"SPECS");

my $typ = $typconv{$type};
$typ = "GATSO" unless defined($typ);

my $retstr="\"$typ:$id\@$snelheid\"";
$retstr .= ",$richting,".($bidirectioneel eq 't' ? "2" : "1" ) if defined($richting);

return $retstr;$_$;


ALTER FUNCTION pois.mtcstring(character varying, integer, integer, integer, boolean) OWNER TO mfvl;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: posten; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE posten (
    id integer NOT NULL,
    lon double precision NOT NULL,
    lat double precision NOT NULL,
    commentaar character varying,
    file character varying NOT NULL,
    naam character varying NOT NULL,
    rel_id integer,
    updated boolean,
    changed boolean,
    richting integer,
    bidirectioneel boolean DEFAULT false,
    land character varying,
    insert_date timestamp without time zone,
    update_date timestamp without time zone
);


ALTER TABLE pois.posten OWNER TO mfvl;

--
-- Name: relatedpois(integer); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION relatedpois(reqid integer) RETURNS SETOF posten
    LANGUAGE sql
    AS $_$SELECT * FROM pois.posten WHERE id=$1 or rel_id=$1 order by rel_id,id;$_$;


ALTER FUNCTION pois.relatedpois(reqid integer) OWNER TO mfvl;

--
-- Name: setrelid(integer, integer); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION setrelid(integer, integer) RETURNS integer
    LANGUAGE sql
    AS $_$UPDATE pois.posten set rel_id=$2 where id=$1;
UPDATE pois.posten set changed='y' where id in ($1,$2);
select $1;$_$;


ALTER FUNCTION pois.setrelid(integer, integer) OWNER TO mfvl;

--
-- Name: setrichting(integer, integer, boolean); Type: FUNCTION; Schema: pois; Owner: root
--

CREATE FUNCTION setrichting(integer, integer, boolean) RETURNS integer
    LANGUAGE sql
    AS $_$UPDATE pois.posten set richting=$2,bidirectioneel=$3,changed='y'  where id=$1;
select $1;$_$;


ALTER FUNCTION pois.setrichting(integer, integer, boolean) OWNER TO root;

--
-- Name: update_poi(); Type: FUNCTION; Schema: pois; Owner: mfvl
--

CREATE FUNCTION update_poi() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
  if ( (new.id != old.id)  or
       (new.lat != old.lat) or
       (new.lon != old.lon) or
       (new.commentaar !=old.commentaar) or
       (new.file != old.file) or
       (new.naam != old.naam) or
       (new.rel_id != old.rel_id) or (new.rel_id is null and not old.rel_id is null) or (old.rel_id is null and not new.rel_id is null) or
       (new.richting != old.richting) or (new.richting is null and not old.richting is null) or (old.richting is null and not new.richting is null) or
       (new.bidirectioneel != old.bidirectioneel) or (new.bidirectioneel is null and not old.bidirectioneel is null) or (old.bidirectioneel is null and not new.bidirectioneel is null) or
       (new.land != old.land) or (new.land is null and not old.land is null) or (old.land is null and not new.land is null) or
       (new.changed = 't' and old.changed ='f') ) then
    new.update_date:=now();
    new.changed:='t';
 end if;
  return new;
end;$$;


ALTER FUNCTION pois.update_poi() OWNER TO mfvl;

SET search_path = public, pg_catalog;

--
-- Name: aantalmail(integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION aantalmail(integer) RETURNS integer
    LANGUAGE sql
    AS $_$SELECT max(priority) from mail where contact_id = $1$_$;


ALTER FUNCTION public.aantalmail(integer) OWNER TO mfvl;

--
-- Name: af_contact_del(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
	delete from naw where contact_id=old.id;
	delete from catcontact where contact_id=old.id;
	delete from fax where contact_id=old.id;
	delete from telephone where contact_id=old.id;
	delete from mail where contact_id=old.id;
	delete from relaties where contact_id=old.id;
	update relaties set relatie_id = null where relatie_id=old.id;
return old;
end;$$;


ALTER FUNCTION public.af_contact_del() OWNER TO mfvl;

--
-- Name: af_contact_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_contact_updtime() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
  new.updatetime=now();
  return new;
end;$$;


ALTER FUNCTION public.af_contact_updtime() OWNER TO mfvl;

--
-- Name: af_updtime(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
  update contacts set updatetime=now() where id=new.contact_id;
  return new;
end;$$;


ALTER FUNCTION public.af_updtime() OWNER TO mfvl;

--
-- Name: af_updtime1(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION af_updtime1() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
  update contacts set updatetime=now() where id=old.contact_id;
  return old;
end;$$;


ALTER FUNCTION public.af_updtime1() OWNER TO mfvl;

--
-- Name: array_to_set(anyarray); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION array_to_set(arr anyarray) RETURNS SETOF anyelement
    LANGUAGE plpgsql
    AS $$
BEGIN
    FOR idx IN array_lower(arr, 1)..array_upper(arr, 1) LOOP
        RETURN NEXT arr[idx];
    END LOOP;
END;
$$;


ALTER FUNCTION public.array_to_set(arr anyarray) OWNER TO mfvl;

--
-- Name: bepaal_tel_prio(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION bepaal_tel_prio(text, text) RETURNS integer
    LANGUAGE plpgsql STABLE
    AS $_$Declare
	aantal integer;
	retval integer;
begin
	select count(prio) into aantal from contacts as c,telephone as t where c.naam=$1 and c.id=t.contact_id and t.tel_type=$2;
	if aantal > 0 then
		select max(prio)+1  into retval from contacts as c,telephone as t where c.naam=$1 and c.id=t.contact_id and t.tel_type=$2;
	else
		retval = 1;
	end if;
	return retval;
end;$_$;


ALTER FUNCTION public.bepaal_tel_prio(text, text) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, integer, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text';


ALTER FUNCTION public.connectby(text, text, text, text, integer, text) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text';


ALTER FUNCTION public.connectby(text, text, text, text, integer) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, text, integer, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text_serial';


ALTER FUNCTION public.connectby(text, text, text, text, text, integer, text) OWNER TO mfvl;

--
-- Name: connectby(text, text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION connectby(text, text, text, text, text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text_serial';


ALTER FUNCTION public.connectby(text, text, text, text, text, integer) OWNER TO mfvl;

--
-- Name: crosstab(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab(text) OWNER TO mfvl;

--
-- Name: crosstab(text, integer); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab(text, integer) OWNER TO mfvl;

--
-- Name: crosstab(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION crosstab(text, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab_hash';


ALTER FUNCTION public.crosstab(text, text) OWNER TO mfvl;

--
-- Name: display_field(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION display_field(text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$select case
when $1 is null then ''
else $1
end$_$;


ALTER FUNCTION public.display_field(text) OWNER TO mfvl;

--
-- Name: getfirstlow(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION getfirstlow(text) RETURNS text
    LANGUAGE plperl
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return substr(lc($value),0,1);
$_$;


ALTER FUNCTION public.getfirstlow(text) OWNER TO mfvl;

--
-- Name: insert_cat(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_cat() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='CAT';
return new;
end;
$$;


ALTER FUNCTION public.insert_cat() OWNER TO mfvl;

--
-- Name: insert_fax(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_fax() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='FAX';
new.number=normtel(new.number);
return new;
end;
$$;


ALTER FUNCTION public.insert_fax() OWNER TO mfvl;

--
-- Name: insert_mail(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_mail() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='MAIL';
new.mailaddress = lower(new.mailaddress);
return new;
end;
$$;


ALTER FUNCTION public.insert_mail() OWNER TO mfvl;

--
-- Name: insert_naw(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_naw() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='NAW';
return new;
end;
$$;


ALTER FUNCTION public.insert_naw() OWNER TO mfvl;

--
-- Name: insert_rek(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_rek() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='REK';
return new;
end;
$$;


ALTER FUNCTION public.insert_rek() OWNER TO mfvl;

--
-- Name: insert_rel(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_rel() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='REL';
return new;
end;
$$;


ALTER FUNCTION public.insert_rel() OWNER TO mfvl;

--
-- Name: insert_tel(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION insert_tel() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.class='TEL';
new.number=normtel(new.number);
return new;
end;$$;


ALTER FUNCTION public.insert_tel() OWNER TO mfvl;

--
-- Name: ldap_create(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_create() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
insert into ldap_entries (dn,oc_map_id,parent,keyval) values ('cn='||new.cn||',o=outlook',1,1,new.id);
return new; 
end;$$;


ALTER FUNCTION public.ldap_create() OWNER TO mfvl;

--
-- Name: ldap_delete(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_delete() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
delete from ldap_entries where keyval = old.id;
return old;
end; $$;


ALTER FUNCTION public.ldap_delete() OWNER TO mfvl;

--
-- Name: ldap_update(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION ldap_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
if (old.cn != new.cn) then
update ldap_entries set dn='cn='||new.cn||',o=outlook' where keyval=new.id;
end if;
return new;end;$$;


ALTER FUNCTION public.ldap_update() OWNER TO mfvl;

--
-- Name: maaksn(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION maaksn(text, text) RETURNS text
    LANGUAGE sql
    AS $_$select case
when $2 is null then $1
else $1 || ', ' || $2
end$_$;


ALTER FUNCTION public.maaksn(text, text) OWNER TO mfvl;

--
-- Name: nonull_append_strings(text, text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION nonull_append_strings(text, text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$select case
when $1 is null then $2
when $2 is null then $1
else $1 || ' ' || $2
end$_$;


ALTER FUNCTION public.nonull_append_strings(text, text) OWNER TO mfvl;

--
-- Name: normal_rand(integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION normal_rand(integer, double precision, double precision) RETURNS SETOF double precision
    LANGUAGE c STRICT
    AS '$libdir/tablefunc', 'normal_rand';


ALTER FUNCTION public.normal_rand(integer, double precision, double precision) OWNER TO mfvl;

--
-- Name: normtel(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION normtel(text) RETURNS text
    LANGUAGE plperl
    AS $_$my $nr = shift;

$nr =~s/[ \-\(\)]//g;

return $nr;$_$;


ALTER FUNCTION public.normtel(text) OWNER TO mfvl;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO mfvl;

--
-- Name: tolower(text); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION tolower(text) RETURNS text
    LANGUAGE plperl
    AS $_$ 
my $value = shift;
$value =~ s/^\W+//;
$value =~ s/^$/inconnu/;
return lc($value);
$_$;


ALTER FUNCTION public.tolower(text) OWNER TO mfvl;

--
-- Name: upd_naw(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION upd_naw() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
if ((new.straat != old.straat ) or (new.postcode != old.postcode) or (new.stad!=old.stad) or (new.land!=old.land)) then
	new.lat=null;
	new.lon=null;
end if;
return new;
end;$$;


ALTER FUNCTION public.upd_naw() OWNER TO mfvl;

--
-- Name: update_mail(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION update_mail() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.mailaddress = lower(new.mailaddress);
return new;
end;
$$;


ALTER FUNCTION public.update_mail() OWNER TO mfvl;

--
-- Name: update_number(); Type: FUNCTION; Schema: public; Owner: mfvl
--

CREATE FUNCTION update_number() RETURNS trigger
    LANGUAGE plpgsql
    AS $$begin
new.number=normtel(new.number);
return new;
end;
$$;


ALTER FUNCTION public.update_number() OWNER TO mfvl;

--
-- Name: ||+; Type: OPERATOR; Schema: public; Owner: mfvl
--

CREATE OPERATOR ||+ (
    PROCEDURE = nonull_append_strings,
    LEFTARG = text,
    RIGHTARG = text
);


ALTER OPERATOR public.||+ (text, text) OWNER TO mfvl;

SET search_path = ms, pg_catalog;

--
-- Name: mediacontent; Type: TABLE; Schema: ms; Owner: mfvl; Tablespace: 
--

CREATE TABLE mediacontent (
    id integer NOT NULL,
    fullpath text NOT NULL,
    dlna_mime text,
    dlna_id text,
    title text NOT NULL,
    url text,
    size bigint,
    parent_id integer,
    dlna_class integer
);


ALTER TABLE ms.mediacontent OWNER TO mfvl;

SET search_path = pois, pg_catalog;

--
-- Name: cameratypes; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE cameratypes (
    id integer NOT NULL,
    naam character varying NOT NULL
);


ALTER TABLE pois.cameratypes OWNER TO mfvl;

--
-- Name: close50; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE close50 (
    id1 integer NOT NULL,
    lat1 double precision NOT NULL,
    lon1 double precision NOT NULL,
    id2 integer NOT NULL,
    lat2 double precision NOT NULL,
    lon2 double precision NOT NULL,
    distance double precision NOT NULL,
    file1 character varying NOT NULL,
    rem1 character varying,
    file2 character varying NOT NULL,
    rem2 character varying,
    t1 character varying,
    t2 character varying
);


ALTER TABLE pois.close50 OWNER TO mfvl;

--
-- Name: close50_upd; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW close50_upd AS
    SELECT CASE WHEN (p1.update_date < p2.update_date) THEN p2.update_date ELSE p1.update_date END AS upd, c.id1, c.lat1, c.lon1, c.id2, c.lat2, c.lon2, c.distance, c.file1, c.rem1, c.file2, c.rem2, c.t1, c.t2 FROM close50 c, posten p1, posten p2 WHERE ((((c.id1 = p1.id) AND (c.id2 = p2.id)) AND (p1.rel_id IS NULL)) AND (p2.rel_id IS NULL)) ORDER BY CASE WHEN (p1.update_date < p2.update_date) THEN p2.update_date ELSE p1.update_date END DESC;


ALTER TABLE pois.close50_upd OWNER TO mfvl;

--
-- Name: inputfiles; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE inputfiles (
    id integer NOT NULL,
    naam character varying NOT NULL,
    snelheid integer,
    type character varying,
    xmlurl character varying,
    lastupdate timestamp without time zone,
    land character varying,
    inmio boolean DEFAULT true NOT NULL
);


ALTER TABLE pois.inputfiles OWNER TO mfvl;

--
-- Name: disthelp; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW disthelp AS
    SELECT p.id, p.lon, p.lat, p.commentaar, p.file, i.type, i.snelheid FROM posten p, inputfiles i WHERE ((((p.rel_id IS NULL) AND p.updated) AND ((p.file)::text = (i.naam)::text)) AND (NOT (i.type IS NULL)));


ALTER TABLE pois.disthelp OWNER TO mfvl;

--
-- Name: disthelp1; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW disthelp1 AS
    SELECT p.lon, p.lat, p.commentaar, p.file FROM posten p WHERE ((p.rel_id IS NULL) AND p.updated);


ALTER TABLE pois.disthelp1 OWNER TO mfvl;

--
-- Name: eigen; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW eigen AS
    SELECT posten.id, posten.lon, posten.lat, posten.commentaar, posten.file, posten.naam, posten.rel_id, posten.updated, posten.changed, posten.richting, posten.bidirectioneel FROM posten posten WHERE ((posten.naam)::text ~~* 'MFVL%'::text) ORDER BY posten.naam DESC;


ALTER TABLE pois.eigen OWNER TO mfvl;

--
-- Name: flitspalen; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW flitspalen AS
    SELECT if.snelheid, COALESCE(if.type, 'Overig'::character varying) AS type, p.lon, p.lat, p.commentaar, p.id, p.rel_id, p.richting, p.bidirectioneel, p.land FROM (inputfiles if JOIN posten p ON (((if.naam)::text = (p.file)::text))) WHERE ((((p.rel_id IS NULL) AND (p.updated = true)) AND ((p.file)::text !~~* '%goedkop%'::text)) AND if.inmio) ORDER BY p.lon, p.lat;


ALTER TABLE pois.flitspalen OWNER TO mfvl;

--
-- Name: gewijzigd; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW gewijzigd AS
    SELECT posten.id, posten.lon, posten.lat, posten.commentaar, posten.file, posten.naam, posten.rel_id, posten.updated, posten.changed, posten.richting, posten.bidirectioneel, posten.land, posten.insert_date, posten.update_date FROM posten WHERE (posten.changed AND posten.updated) ORDER BY posten.id DESC;


ALTER TABLE pois.gewijzigd OWNER TO mfvl;

--
-- Name: inputfiles_id_seq; Type: SEQUENCE; Schema: pois; Owner: mfvl
--

CREATE SEQUENCE inputfiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE pois.inputfiles_id_seq OWNER TO mfvl;

--
-- Name: inputfiles_id_seq; Type: SEQUENCE OWNED BY; Schema: pois; Owner: mfvl
--

ALTER SEQUENCE inputfiles_id_seq OWNED BY inputfiles.id;


--
-- Name: laatste week; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW "laatste week" AS
    SELECT posten.id, posten.lon, posten.lat, posten.commentaar, posten.file, posten.naam, posten.rel_id, posten.updated, posten.changed, posten.richting, posten.bidirectioneel, posten.land, posten.insert_date, posten.update_date FROM posten WHERE (posten.updated AND (posten.update_date > (now() - '7 days'::interval))) ORDER BY posten.update_date DESC, posten.id DESC;


ALTER TABLE pois."laatste week" OWNER TO mfvl;

--
-- Name: miolijst; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW miolijst AS
    SELECT flitspalen.lon, flitspalen.lat, mtcstring(flitspalen.type, flitspalen.id, flitspalen.snelheid, flitspalen.richting, flitspalen.bidirectioneel) AS mtcstring FROM flitspalen WHERE ((flitspalen.type)::text <> 'Overig'::text) ORDER BY flitspalen.lon, flitspalen.lat;


ALTER TABLE pois.miolijst OWNER TO mfvl;

--
-- Name: poisupdate; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE poisupdate (
    id integer NOT NULL,
    lat double precision NOT NULL,
    ruwedata text,
    veld1 integer,
    veld2 integer,
    veld3 integer,
    veld4 integer,
    lon double precision NOT NULL,
    type text,
    snelheid integer
);


ALTER TABLE pois.poisupdate OWNER TO mfvl;

--
-- Name: posten_id_seq; Type: SEQUENCE; Schema: pois; Owner: mfvl
--

CREATE SEQUENCE posten_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE pois.posten_id_seq OWNER TO mfvl;

--
-- Name: posten_id_seq; Type: SEQUENCE OWNED BY; Schema: pois; Owner: mfvl
--

ALTER SEQUENCE posten_id_seq OWNED BY posten.id;


--
-- Name: temp; Type: TABLE; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE TABLE temp (
    lat double precision,
    lon double precision,
    descr character varying,
    filename character varying,
    naam character varying
);


ALTER TABLE pois.temp OWNER TO mfvl;

--
-- Name: vergelijk poisupdate; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW "vergelijk poisupdate" AS
    SELECT pu.id AS pu_id, pu.lat, pu.lon, pu.type AS pu_type, pu.snelheid AS pu_snelheid, i.snelheid, i.type, p.id, p.rel_id, pu.veld1, pu.veld2, pu.veld3, pu.veld4, (pu.veld1 - 27392) AS t1, p.richting, p.bidirectioneel, pu.ruwedata FROM (inputfiles i RIGHT JOIN (poisupdate pu LEFT JOIN posten p ON (((pu.lon = p.lon) AND (pu.lat = p.lat)))) ON (((i.naam)::text = (p.file)::text))) ORDER BY pu.id;


ALTER TABLE pois."vergelijk poisupdate" OWNER TO mfvl;

--
-- Name: woonwerk; Type: VIEW; Schema: pois; Owner: mfvl
--

CREATE VIEW woonwerk AS
    SELECT posten.id, posten.lon, posten.lat, posten.commentaar, posten.file, posten.naam, posten.rel_id, posten.updated, posten.changed, posten.richting, posten.bidirectioneel, posten.land, posten.insert_date, posten.update_date FROM posten WHERE ((((posten.lat >= (51.83)::double precision) AND (posten.lat <= (52.35)::double precision)) AND (posten.lon >= (4.35)::double precision)) AND (posten.lon <= (5.17)::double precision));


ALTER TABLE pois.woonwerk OWNER TO mfvl;

SET search_path = public, pg_catalog;

SET default_with_oids = true;

--
-- Name: adr_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE adr_types (
    adr_type character varying NOT NULL,
    volgorde integer
);


ALTER TABLE public.adr_types OWNER TO mfvl;

--
-- Name: attr; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE attr (
    id integer NOT NULL,
    contact_id integer NOT NULL,
    class character varying NOT NULL
);


ALTER TABLE public.attr OWNER TO mfvl;

--
-- Name: attr_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE attr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.attr_id_seq OWNER TO mfvl;

--
-- Name: attr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE attr_id_seq OWNED BY attr.id;


--
-- Name: contacts; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE contacts (
    id integer NOT NULL,
    fileas character varying NOT NULL,
    naam character varying NOT NULL,
    outlooktime timestamp with time zone,
    voornaam character varying,
    achternaam character varying,
    webpagina character varying,
    company character varying,
    updatetime timestamp with time zone DEFAULT now() NOT NULL,
    cn character varying NOT NULL,
    geslacht character(1),
    uid character varying,
    password character varying,
    function character varying,
    voorletters character varying,
    tussenvoegsel character varying,
    geboortedatum date,
    inipaq boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    CONSTRAINT geslacht CHECK (((geslacht = 'M'::bpchar) OR (geslacht = 'V'::bpchar)))
);


ALTER TABLE public.contacts OWNER TO mfvl;

--
-- Name: naw; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE naw (
    straat character varying,
    provincie character varying,
    postcode character varying,
    stad character varying,
    land character varying DEFAULT 'Nederland'::character varying NOT NULL,
    adr_type character varying NOT NULL,
    standaard boolean DEFAULT false,
    lat double precision,
    lon double precision,
    inmio boolean DEFAULT true,
    mioicon smallint DEFAULT 1 NOT NULL
)
INHERITS (attr);


ALTER TABLE public.naw OWNER TO mfvl;

--
-- Name: adres; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW adres AS
    SELECT contacts.naam, naw.straat, naw.postcode, naw.stad, naw.land, naw.inmio, naw.adr_type FROM contacts, naw WHERE (contacts.id = naw.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.adres OWNER TO mfvl;

--
-- Name: adres_bedrijf; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW adres_bedrijf AS
    SELECT contacts.naam, contacts.company, naw.straat, naw.postcode, naw.stad, naw.land, naw.inmio, naw.adr_type FROM contacts, naw WHERE ((contacts.id = naw.contact_id) AND ((naw.adr_type)::text <> 'Prive'::text)) ORDER BY contacts.fileas;


ALTER TABLE public.adres_bedrijf OWNER TO mfvl;

SET default_with_oids = false;

--
-- Name: adressen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE adressen (
    "Voornaam" character varying(255),
    "Achternaam" character varying(255),
    "Weergavenaam" character varying(255),
    "Bijnaam" character varying(255),
    "Eerste e-mail" character varying(255),
    "Tweede e-mail" character varying(255),
    "Telefoon werk" character varying(255),
    "Telefoon thuis" character varying(255),
    "Faxnummer" character varying(255),
    "Piepernummer" character varying(255),
    "Mobiel nummer" character varying(255),
    "Adres" character varying(255),
    "Adres 2" character varying(255),
    "Woonplaats" character varying(255),
    "Provincie" character varying(255),
    "Postcode" character varying(255),
    "Land" character varying(255),
    "Werkadres" character varying(255),
    "Werkadres 2" character varying(255),
    "Werkplaats" character varying(255),
    "Werkprovincie" character varying(255),
    "Werkpostcode" character varying(255),
    "Werkland" character varying(255),
    "Werktitel" character varying(255),
    "Afdeling" character varying(255),
    "Organisatie" character varying(255),
    "Webpagina 1" character varying(255),
    "Webpagina 2" character varying(255),
    "Geboortejaar" character varying(255),
    "Geboortemaand" character varying(255),
    "Geboortedag" character varying(255),
    "Overig 1" character varying(255),
    "Overig 2" character varying(255),
    "Overig 3" character varying(255),
    "Overig 4" character varying(255),
    "Aantekeningen" character varying(255),
    f37 character varying(255)
);


ALTER TABLE public.adressen OWNER TO mfvl;

--
-- Name: apacherealm; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE apacherealm (
    uid character varying NOT NULL,
    realm character varying NOT NULL,
    password character varying NOT NULL
);


ALTER TABLE public.apacherealm OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: catcontact; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE catcontact (
    cat_id integer NOT NULL
)
INHERITS (attr);


ALTER TABLE public.catcontact OWNER TO mfvl;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE categories (
    id integer NOT NULL,
    categorie character varying
);


ALTER TABLE public.categories OWNER TO mfvl;

--
-- Name: categorielijst; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW categorielijst AS
    SELECT co.naam, ca.categorie FROM contacts co, catcontact cc, categories ca WHERE ((co.id = cc.contact_id) AND (cc.cat_id = ca.id)) ORDER BY co.fileas;


ALTER TABLE public.categorielijst OWNER TO mfvl;

--
-- Name: categories_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.categories_id_seq OWNER TO mfvl;

--
-- Name: categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE categories_id_seq OWNED BY categories.id;


SET default_with_oids = false;

--
-- Name: chansons; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE chansons (
    id integer NOT NULL,
    fichier text,
    title text,
    artist text,
    album text,
    format text,
    tested integer
);


ALTER TABLE public.chansons OWNER TO mfvl;

--
-- Name: chansons_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE chansons_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.chansons_id_seq OWNER TO mfvl;

--
-- Name: chansons_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE chansons_id_seq OWNED BY chansons.id;


--
-- Name: contacts_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE contacts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.contacts_id_seq OWNER TO mfvl;

--
-- Name: contacts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE contacts_id_seq OWNED BY contacts.id;


--
-- Name: dankbetuigingen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW dankbetuigingen AS
    SELECT co.naam, na.straat, na.postcode, na.stad, na.provincie, na.land FROM categories ca, catcontact cc, contacts co, naw na WHERE ((((((ca.categorie)::text = 'dank_pa'::text) AND (ca.id = cc.cat_id)) AND (cc.contact_id = co.id)) AND (co.id = na.contact_id)) AND (na.standaard = true)) ORDER BY co.fileas;


ALTER TABLE public.dankbetuigingen OWNER TO mfvl;

--
-- Name: videos; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE videos (
    tijdstip timestamp without time zone NOT NULL,
    directory character varying NOT NULL,
    naam character varying NOT NULL,
    duur double precision,
    onderwerp character varying,
    dvdnr integer,
    aspect character varying
);


ALTER TABLE public.videos OWNER TO mfvl;

--
-- Name: dvds; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW dvds AS
    SELECT videos.dvdnr, (sum(videos.duur) / (60)::double precision) AS duur, min(date(videos.tijdstip)) AS eerstedag, max(date(videos.tijdstip)) AS laatstedag FROM videos WHERE (videos.duur > (3)::double precision) GROUP BY videos.dvdnr ORDER BY videos.dvdnr;


ALTER TABLE public.dvds OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: mail; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE mail (
    mailaddress character varying NOT NULL,
    priority integer,
    type character varying
)
INHERITS (attr);


ALTER TABLE public.mail OWNER TO mfvl;

--
-- Name: email; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW email AS
    SELECT contacts.naam, mail.mailaddress, mail.type, mail.priority FROM contacts, mail WHERE (contacts.id = mail.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.email OWNER TO mfvl;

--
-- Name: fax; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE fax (
    number character varying NOT NULL,
    fax_type character varying DEFAULT 'Onbekend'::character varying NOT NULL,
    prio integer
)
INHERITS (attr);


ALTER TABLE public.fax OWNER TO mfvl;

--
-- Name: faxnummer; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW faxnummer AS
    SELECT contacts.naam, fax.number, fax.fax_type FROM contacts, fax WHERE (contacts.id = fax.contact_id) ORDER BY contacts.fileas;


ALTER TABLE public.faxnummer OWNER TO mfvl;

SET default_with_oids = false;

--
-- Name: guestbook; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE guestbook (
    id integer NOT NULL,
    email character varying(32) DEFAULT 'php'::character varying NOT NULL,
    comment text,
    created timestamp without time zone NOT NULL
);


ALTER TABLE public.guestbook OWNER TO mfvl;

--
-- Name: guestbook_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE guestbook_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.guestbook_id_seq OWNER TO mfvl;

--
-- Name: guestbook_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE guestbook_id_seq OWNED BY guestbook.id;


--
-- Name: invoer; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW invoer AS
    SELECT contacts.voornaam, contacts.voorletters, contacts.tussenvoegsel, contacts.achternaam, contacts.company, contacts.function, contacts.geboortedatum, contacts.geslacht, contacts.webpagina FROM contacts ORDER BY contacts.fileas;


ALTER TABLE public.invoer OWNER TO mfvl;

--
-- Name: kerstkaart; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW kerstkaart AS
    SELECT contacts.id, contacts.naam, naw.straat, naw.postcode, naw.stad, CASE naw.land WHEN 'Nederland'::text THEN NULL::character varying ELSE naw.land END AS land FROM contacts, naw, catcontact, categories WHERE (((((naw.standaard = true) AND (naw.contact_id = contacts.id)) AND (contacts.id = catcontact.contact_id)) AND (catcontact.cat_id = categories.id)) AND ((categories.categorie)::text = 'kerstkaart'::text)) ORDER BY naw.land, naw.postcode;


ALTER TABLE public.kerstkaart OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: ldap_attr_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_attr_mappings (
    id integer NOT NULL,
    oc_map_id integer NOT NULL,
    name character varying(255) NOT NULL,
    sel_expr character varying(255) NOT NULL,
    sel_expr_u character varying(255),
    from_tbls character varying(255) NOT NULL,
    join_where character varying(255),
    add_proc character varying(255),
    delete_proc character varying(255),
    param_order integer NOT NULL,
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_attr_mappings OWNER TO mfvl;

--
-- Name: ldap_attr_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_attr_mappings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_attr_mappings_id_seq OWNER TO mfvl;

--
-- Name: ldap_attr_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_attr_mappings_id_seq OWNED BY ldap_attr_mappings.id;


--
-- Name: ldap_entries; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entries (
    id integer NOT NULL,
    dn character varying(255) NOT NULL,
    oc_map_id integer NOT NULL,
    parent integer NOT NULL,
    keyval integer NOT NULL
);


ALTER TABLE public.ldap_entries OWNER TO mfvl;

--
-- Name: ldap_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_entries_id_seq OWNER TO mfvl;

--
-- Name: ldap_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_entries_id_seq OWNED BY ldap_entries.id;


--
-- Name: ldap_entry_objclasses; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_entry_objclasses (
    entry_id integer NOT NULL,
    oc_name character varying(64)
);


ALTER TABLE public.ldap_entry_objclasses OWNER TO mfvl;

--
-- Name: ldap_oc_mappings; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE ldap_oc_mappings (
    id integer NOT NULL,
    name character varying(64) NOT NULL,
    keytbl character varying(64) NOT NULL,
    keycol character varying(64) NOT NULL,
    create_proc character varying(255),
    delete_proc character varying(255),
    expect_return integer NOT NULL
);


ALTER TABLE public.ldap_oc_mappings OWNER TO mfvl;

--
-- Name: ldap_oc_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE ldap_oc_mappings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.ldap_oc_mappings_id_seq OWNER TO mfvl;

--
-- Name: ldap_oc_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE ldap_oc_mappings_id_seq OWNED BY ldap_oc_mappings.id;


--
-- Name: ldapmail; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW ldapmail AS
    SELECT (((('cn='::text || (contacts.cn)::text) || ' ('::text) || (mail.priority)::text) || '),o=mail'::text) AS dn, ((mail.contact_id * 100) + mail.priority) AS keyval, mail.mailaddress FROM contacts, mail WHERE (mail.contact_id = contacts.id) ORDER BY mail.contact_id;


ALTER TABLE public.ldapmail OWNER TO mfvl;

SET default_with_oids = false;

--
-- Name: linkedin_connections_export_microsoft_outlook; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE linkedin_connections_export_microsoft_outlook (
    "Title" character varying(255),
    "First Name" character varying(255),
    "Middle Name" character varying(255),
    "Last Name" character varying(255),
    "Suffix" character varying(255),
    "E-mail Address" character varying(255),
    "E-mail 2 Address" character varying(255),
    "E-mail 3 Address" character varying(255),
    "Business Street" character varying(255),
    "Business Street 2" character varying(255),
    "Business Street 3" character varying(255),
    "Business City" character varying(255),
    "Business State" character varying(255),
    "Business Postal Code" character varying(255),
    "Business Country" character varying(255),
    "Home Street" character varying(255),
    "Home Street 2" character varying(255),
    "Home Street 3" character varying(255),
    "Home City" character varying(255),
    "Home State" character varying(255),
    "Home Postal Code" character varying(255),
    "Home Country" character varying(255),
    "Other Street" character varying(255),
    "Other Street 2" character varying(255),
    "Other Street 3" character varying(255),
    "Other City" character varying(255),
    "Other State" character varying(255),
    "Other Postal Code" character varying(255),
    "Other Country" character varying(255),
    "Company" character varying(255),
    "Department" character varying(255),
    "Job Title" character varying(255),
    "Assistant's Phone" character varying(255),
    "Business Fax" character varying(255),
    "Business Phone" character varying(255),
    "Business Phone 2" character varying(255),
    "Callback" character varying(255),
    "Car Phone" character varying(255),
    "Company Main Phone" character varying(255),
    "Home Fax" character varying(255),
    "Home Phone" character varying(255),
    "Home Phone 2" character varying(255),
    "ISDN" character varying(255),
    "Mobile Phone" character varying(255),
    "Other Fax" character varying(255),
    "Other Phone" character varying(255),
    "Pager" character varying(255),
    "Primary Phone" character varying(255),
    "Radio Phone" character varying(255),
    "TTY/TDD Phone" character varying(255),
    "Telex" character varying(255),
    "Assistant's Name" character varying(255),
    "Birthday" character varying(255),
    "Manager's Name" character varying(255),
    "Notes" character varying(255),
    "Other Address PO Box" character varying(255),
    "Spouse" character varying(255),
    "Web Page" character varying(255),
    "Personal Web Page" character varying(255)
);


ALTER TABLE public.linkedin_connections_export_microsoft_outlook OWNER TO mfvl;

--
-- Name: linkedin; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW linkedin AS
    SELECT (((linkedin_connections_export_microsoft_outlook."First Name")::text || ' '::text) || (linkedin_connections_export_microsoft_outlook."Last Name")::text) AS linked_naam, linkedin_connections_export_microsoft_outlook."E-mail Address" AS linked_mailaddr, linkedin_connections_export_microsoft_outlook."Company" AS linked_company, linkedin_connections_export_microsoft_outlook."Job Title" AS linked_functie FROM linkedin_connections_export_microsoft_outlook;


ALTER TABLE public.linkedin OWNER TO mfvl;

--
-- Name: login; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW login AS
    SELECT contacts.uid, contacts.password, contacts.naam FROM contacts WHERE (NOT (contacts.uid IS NULL));


ALTER TABLE public.login OWNER TO mfvl;

--
-- Name: login1; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW login1 AS
    SELECT a.uid, a.password, a.realm, c.naam FROM (apacherealm a LEFT JOIN contacts c ON (((a.uid)::text = (c.uid)::text)));


ALTER TABLE public.login1 OWNER TO mfvl;

--
-- Name: match_linkedin; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW match_linkedin AS
    SELECT l.linked_naam, l.linked_mailaddr, l.linked_company, l.linked_functie, c.id, c.fileas, c.naam, c.outlooktime, c.voornaam, c.achternaam, c.webpagina, c.company, c.updatetime, c.cn, c.geslacht, c.uid, c.password, c.function, c.voorletters, c.tussenvoegsel, c.geboortedatum, c.inipaq FROM (linkedin l LEFT JOIN contacts c ON ((l.linked_naam = (c.cn)::text))) ORDER BY l.linked_naam;


ALTER TABLE public.match_linkedin OWNER TO mfvl;

--
-- Name: miolijst; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW miolijst AS
    SELECT CASE WHEN ((naw.adr_type)::text = 'Werk'::text) THEN contacts.company ELSE contacts.naam END AS naam, naw.id, naw.straat, naw.postcode, naw.stad, naw.land, naw.lat, naw.lon, naw.mioicon, naw.adr_type, naw.inmio FROM contacts, naw WHERE ((contacts.id = naw.contact_id) AND naw.inmio) ORDER BY contacts.fileas;


ALTER TABLE public.miolijst OWNER TO mfvl;

--
-- Name: mp3; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE mp3 (
    id integer NOT NULL,
    filename character varying,
    artist character varying,
    album character varying,
    song character varying,
    track character varying,
    genre character varying,
    comment character varying,
    year character varying,
    duur character varying,
    filesize character varying
);


ALTER TABLE public.mp3 OWNER TO mfvl;

--
-- Name: mp3_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE mp3_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.mp3_id_seq OWNER TO mfvl;

--
-- Name: mp3_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE mp3_id_seq OWNED BY mp3.id;


--
-- Name: mp3cd; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE mp3cd (
    cdnr integer,
    directory character varying,
    track integer,
    mp3id integer
);


ALTER TABLE public.mp3cd OWNER TO mfvl;

--
-- Name: mp3cdcontents; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW mp3cdcontents AS
    SELECT c.cdnr, c.directory, c.track, m.artist, m.song, m.filename FROM mp3cd c, mp3 m WHERE (c.mp3id = m.id) ORDER BY c.cdnr, c.directory, c.track;


ALTER TABLE public.mp3cdcontents OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: rekeningnummer; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE rekeningnummer (
    rekeniningnummer character varying NOT NULL,
    naamstelling character varying
)
INHERITS (attr);


ALTER TABLE public.rekeningnummer OWNER TO mfvl;

--
-- Name: relaties; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relaties (
    naam character varying,
    relatie character varying,
    relatie_id integer
)
INHERITS (attr);


ALTER TABLE public.relaties OWNER TO mfvl;

--
-- Name: relatievormen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE relatievormen (
    relatie character varying NOT NULL
);


ALTER TABLE public.relatievormen OWNER TO mfvl;

--
-- Name: sendmailmta; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmta (
    id integer NOT NULL,
    mtacluster character varying DEFAULT 'Servers'::character varying,
    mtahost character varying,
    description character varying
);


ALTER TABLE public.sendmailmta OWNER TO mfvl;

--
-- Name: sendmailmta_id_seq; Type: SEQUENCE; Schema: public; Owner: mfvl
--

CREATE SEQUENCE sendmailmta_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.sendmailmta_id_seq OWNER TO mfvl;

--
-- Name: sendmailmta_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: mfvl
--

ALTER SEQUENCE sendmailmta_id_seq OWNED BY sendmailmta.id;


--
-- Name: sendmailmtaalias; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaalias (
    mtaaliasgrouping character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtaalias OWNER TO mfvl;

--
-- Name: sendmailmtaaliasobject; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaaliasobject (
    mtakey character varying NOT NULL,
    mtaaliasvalue character varying
)
INHERITS (sendmailmtaalias);


ALTER TABLE public.sendmailmtaaliasobject OWNER TO mfvl;

--
-- Name: sendmailmtaclass; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtaclass (
    mtaclassname character varying NOT NULL,
    mtaclassvalue character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtaclass OWNER TO mfvl;

--
-- Name: sendmailmtamap; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtamap (
    mtamapname character varying
)
INHERITS (sendmailmta);


ALTER TABLE public.sendmailmtamap OWNER TO mfvl;

--
-- Name: sendmailmtamapobject; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE sendmailmtamapobject (
    mtakey character varying,
    mtamapvalue character varying
)
INHERITS (sendmailmtamap);


ALTER TABLE public.sendmailmtamapobject OWNER TO mfvl;

--
-- Name: tel_types; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE tel_types (
    tel_type character varying NOT NULL,
    "order" smallint NOT NULL
);


ALTER TABLE public.tel_types OWNER TO mfvl;

--
-- Name: telephone; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telephone (
    number character varying NOT NULL,
    tel_type character varying DEFAULT 'Onbekend'::character varying NOT NULL,
    prio integer,
    list boolean DEFAULT true NOT NULL
)
INHERITS (attr);


ALTER TABLE public.telephone OWNER TO mfvl;

--
-- Name: telfort; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort (
    tijd timestamp without time zone,
    type character varying,
    nummer character varying,
    bedrag bigint,
    mb double precision,
    duur integer,
    bundel boolean
);


ALTER TABLE public.telfort OWNER TO mfvl;

--
-- Name: telfort_namen; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_namen (
    nummer character varying NOT NULL,
    naam character varying,
    list boolean DEFAULT true
);


ALTER TABLE public.telfort_namen OWNER TO mfvl;

--
-- Name: telnummer; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW telnummer AS
    SELECT contacts.naam, telephone.number, telephone.tel_type, telephone.prio, telephone.list FROM contacts, telephone WHERE (contacts.id = telephone.contact_id) ORDER BY contacts.fileas, telephone.prio;


ALTER TABLE public.telnummer OWNER TO mfvl;

--
-- Name: telfort_allenamen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW telfort_allenamen AS
    SELECT telfort_namen.naam, telfort_namen.nummer, telfort_namen.list FROM telfort_namen UNION SELECT telnummer.naam, telnummer.number AS nummer, telnummer.list FROM telnummer;


ALTER TABLE public.telfort_allenamen OWNER TO mfvl;

--
-- Name: telfort_vertaal; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_vertaal (
    nummer character varying NOT NULL,
    nummer_vertaald character varying
);


ALTER TABLE public.telfort_vertaal OWNER TO mfvl;

--
-- Name: telfort_zakelijk; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE telfort_zakelijk (
    naam character varying NOT NULL,
    zakelijk boolean DEFAULT false NOT NULL
);


ALTER TABLE public.telfort_zakelijk OWNER TO mfvl;

SET default_with_oids = false;

--
-- Name: temp; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE temp (
    "First Name" character varying,
    "Middle Name" character varying,
    "Last Name" character varying,
    "E-mail Address" character varying,
    "E-mail 2 Address" character varying,
    "E-mail 3 Address" character varying,
    "Company" character varying,
    "Job Title" character varying
);


ALTER TABLE public.temp OWNER TO mfvl;

SET default_with_oids = true;

--
-- Name: tijdelijk; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE tijdelijk (
    voornaam character varying,
    achternaam character varying,
    bedrijf character varying,
    adres character varying,
    postcode character varying,
    plaats character varying,
    procincie character varying,
    land character varying,
    contact_id integer
);


ALTER TABLE public.tijdelijk OWNER TO mfvl;

--
-- Name: vakantie; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW vakantie AS
    SELECT DISTINCT contacts.id, contacts.naam, naw.straat, naw.postcode, naw.stad, CASE naw.land WHEN 'Nederland'::text THEN NULL::character varying ELSE naw.land END AS land FROM contacts, naw, catcontact, categories WHERE (((((naw.standaard = true) AND (naw.contact_id = contacts.id)) AND (contacts.id = catcontact.contact_id)) AND (catcontact.cat_id = categories.id)) AND ((categories.categorie)::text = ANY (ARRAY['holiday cards'::text, 'helgavakantie'::text]))) ORDER BY CASE naw.land WHEN 'Nederland'::text THEN NULL::character varying ELSE naw.land END, naw.postcode, contacts.id, contacts.naam, naw.straat, naw.stad;


ALTER TABLE public.vakantie OWNER TO mfvl;

SET default_with_oids = false;

--
-- Name: video_aspect; Type: TABLE; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE TABLE video_aspect (
    aspect character varying NOT NULL
);


ALTER TABLE public.video_aspect OWNER TO mfvl;

--
-- Name: videoonderwerpen; Type: VIEW; Schema: public; Owner: mfvl
--

CREATE VIEW videoonderwerpen AS
    SELECT date(videos.tijdstip) AS date, videos.onderwerp, videos.dvdnr, (sum(videos.duur) / (60)::double precision) FROM videos WHERE ((videos.duur > (3)::double precision) AND (NOT (videos.dvdnr IS NULL))) GROUP BY date(videos.tijdstip), videos.onderwerp, videos.dvdnr ORDER BY date(videos.tijdstip), videos.onderwerp, videos.dvdnr;


ALTER TABLE public.videoonderwerpen OWNER TO mfvl;

SET search_path = pois, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: pois; Owner: mfvl
--

ALTER TABLE inputfiles ALTER COLUMN id SET DEFAULT nextval('inputfiles_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: pois; Owner: mfvl
--

ALTER TABLE posten ALTER COLUMN id SET DEFAULT nextval('posten_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE attr ALTER COLUMN id SET DEFAULT nextval('attr_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE categories ALTER COLUMN id SET DEFAULT nextval('categories_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE chansons ALTER COLUMN id SET DEFAULT nextval('chansons_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE contacts ALTER COLUMN id SET DEFAULT nextval('contacts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE guestbook ALTER COLUMN id SET DEFAULT nextval('guestbook_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_attr_mappings ALTER COLUMN id SET DEFAULT nextval('ldap_attr_mappings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_entries ALTER COLUMN id SET DEFAULT nextval('ldap_entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE ldap_oc_mappings ALTER COLUMN id SET DEFAULT nextval('ldap_oc_mappings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE mp3 ALTER COLUMN id SET DEFAULT nextval('mp3_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: mfvl
--

ALTER TABLE sendmailmta ALTER COLUMN id SET DEFAULT nextval('sendmailmta_id_seq'::regclass);


SET search_path = ms, pg_catalog;

--
-- Name: mediacontent_pkey; Type: CONSTRAINT; Schema: ms; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mediacontent
    ADD CONSTRAINT mediacontent_pkey PRIMARY KEY (id);


SET search_path = pois, pg_catalog;

--
-- Name: cameratypes_naam_key; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY cameratypes
    ADD CONSTRAINT cameratypes_naam_key UNIQUE (naam);


--
-- Name: close50_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY close50
    ADD CONSTRAINT close50_pkey PRIMARY KEY (id1, id2);


--
-- Name: inputfiles_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY inputfiles
    ADD CONSTRAINT inputfiles_pkey PRIMARY KEY (naam);


--
-- Name: poisupdate_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY poisupdate
    ADD CONSTRAINT poisupdate_pkey PRIMARY KEY (id);


--
-- Name: posten_naam_key; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_naam_key UNIQUE (naam);


--
-- Name: posten_pkey; Type: CONSTRAINT; Schema: pois; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_pkey PRIMARY KEY (id);


SET search_path = public, pg_catalog;

--
-- Name: adr_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY adr_types
    ADD CONSTRAINT adr_types_pkey PRIMARY KEY (adr_type);


--
-- Name: adr_types_volgorde_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY adr_types
    ADD CONSTRAINT adr_types_volgorde_key UNIQUE (volgorde);


--
-- Name: apacherealm_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY apacherealm
    ADD CONSTRAINT apacherealm_pkey PRIMARY KEY (uid, realm);


--
-- Name: attr_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY attr
    ADD CONSTRAINT attr_pkey PRIMARY KEY (id);


--
-- Name: catcontact_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_contact_id_key UNIQUE (contact_id, cat_id);


--
-- Name: categories_categorie_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_categorie_key UNIQUE (categorie);


--
-- Name: categories_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- Name: chansons_fichier_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY chansons
    ADD CONSTRAINT chansons_fichier_key UNIQUE (fichier);


--
-- Name: chansons_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY chansons
    ADD CONSTRAINT chansons_pkey PRIMARY KEY (id);


--
-- Name: contacts_fileas_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_fileas_key UNIQUE (fileas);


--
-- Name: contacts_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_pkey PRIMARY KEY (id);


--
-- Name: contacts_uid_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_uid_key UNIQUE (uid);


--
-- Name: fax_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_key UNIQUE (contact_id, fax_type, prio);


--
-- Name: fax_contact_id_key1; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_key1 UNIQUE (contact_id, number, fax_type);


--
-- Name: fax_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_pkey PRIMARY KEY (id);


--
-- Name: file_dir; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY videos
    ADD CONSTRAINT file_dir UNIQUE (directory, naam);


--
-- Name: guestbook_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY guestbook
    ADD CONSTRAINT guestbook_pkey PRIMARY KEY (id);


--
-- Name: ldap_attr_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_pkey PRIMARY KEY (id);


--
-- Name: ldap_entries_dn_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_dn_key UNIQUE (dn);


--
-- Name: ldap_entries_oc_map_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_key UNIQUE (oc_map_id, keyval);


--
-- Name: ldap_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_pkey PRIMARY KEY (id);


--
-- Name: ldap_oc_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY ldap_oc_mappings
    ADD CONSTRAINT ldap_oc_mappings_pkey PRIMARY KEY (id);


--
-- Name: mail_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_contact_id_key UNIQUE (contact_id, priority);


--
-- Name: mail_mailaddress_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_mailaddress_key UNIQUE (mailaddress);


--
-- Name: mail_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_pkey PRIMARY KEY (id);


--
-- Name: mp3_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mp3
    ADD CONSTRAINT mp3_pkey PRIMARY KEY (id);


--
-- Name: naw_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT naw_pkey PRIMARY KEY (id);


--
-- Name: rekeningnummer_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY rekeningnummer
    ADD CONSTRAINT rekeningnummer_pkey PRIMARY KEY (contact_id, rekeniningnummer);


--
-- Name: relaties_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_pkey PRIMARY KEY (id);


--
-- Name: relatievormen_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY relatievormen
    ADD CONSTRAINT relatievormen_pkey PRIMARY KEY (relatie);


--
-- Name: sendmailmta_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY sendmailmta
    ADD CONSTRAINT sendmailmta_pkey PRIMARY KEY (id);


--
-- Name: sendmailmtaaliasobject_mtakey_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY sendmailmtaaliasobject
    ADD CONSTRAINT sendmailmtaaliasobject_mtakey_key UNIQUE (mtakey);


--
-- Name: tel_type_order; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY tel_types
    ADD CONSTRAINT tel_type_order UNIQUE ("order");


--
-- Name: tel_types_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY tel_types
    ADD CONSTRAINT tel_types_pkey PRIMARY KEY (tel_type);


--
-- Name: telephone_contact_id_key; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_key UNIQUE (contact_id, number, tel_type);


--
-- Name: telephone_contact_id_key1; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_key1 UNIQUE (contact_id, number, tel_type);


--
-- Name: telephone_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_pkey PRIMARY KEY (id);


--
-- Name: teleprio; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT teleprio UNIQUE (contact_id, tel_type, prio);


--
-- Name: telfort_namen_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_namen
    ADD CONSTRAINT telfort_namen_pkey PRIMARY KEY (nummer);


--
-- Name: telfort_vertaal_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_vertaal
    ADD CONSTRAINT telfort_vertaal_pkey PRIMARY KEY (nummer);


--
-- Name: telfort_zakelijk_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY telfort_zakelijk
    ADD CONSTRAINT telfort_zakelijk_pkey PRIMARY KEY (naam);


--
-- Name: track; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY mp3cd
    ADD CONSTRAINT track UNIQUE (cdnr, directory, track);


--
-- Name: uninaw; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT uninaw UNIQUE (contact_id, adr_type);


--
-- Name: video_aspect_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY video_aspect
    ADD CONSTRAINT video_aspect_pkey PRIMARY KEY (aspect);


--
-- Name: videos_pkey; Type: CONSTRAINT; Schema: public; Owner: mfvl; Tablespace: 
--

ALTER TABLE ONLY videos
    ADD CONSTRAINT videos_pkey PRIMARY KEY (tijdstip);


SET search_path = ms, pg_catalog;

--
-- Name: med_fn_idx; Type: INDEX; Schema: ms; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX med_fn_idx ON mediacontent USING btree (fullpath);


--
-- Name: med_id_odx; Type: INDEX; Schema: ms; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX med_id_odx ON mediacontent USING btree (id);


SET search_path = pois, pg_catalog;

--
-- Name: if_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX if_001 ON inputfiles USING btree (type);


--
-- Name: if_002; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX if_002 ON inputfiles USING btree (snelheid);


--
-- Name: if_003; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX if_003 ON inputfiles USING btree (id);


--
-- Name: inputfiles_type; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX inputfiles_type ON inputfiles USING btree (type);


--
-- Name: posten_commentaar_key; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_commentaar_key ON posten USING btree (commentaar);


--
-- Name: posten_file_key; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_file_key ON posten USING btree (file);


--
-- Name: posten_lat_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_lat_001 ON posten USING btree (lat);


--
-- Name: posten_latlon_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_latlon_001 ON posten USING btree (lon, lat);


--
-- Name: posten_lon_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_lon_001 ON posten USING btree (lon);


--
-- Name: posten_rel_id_001; Type: INDEX; Schema: pois; Owner: mfvl; Tablespace: 
--

CREATE INDEX posten_rel_id_001 ON posten USING btree (rel_id) WHERE (rel_id IS NULL);


SET search_path = public, pg_catalog;

--
-- Name: catcontact_cat_id; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX catcontact_cat_id ON catcontact USING btree (cat_id);


--
-- Name: catcontact_contact_id; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX catcontact_contact_id ON catcontact USING btree (contact_id);


--
-- Name: contacts_achternaam; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX contacts_achternaam ON contacts USING btree (achternaam);


--
-- Name: contacts_cn; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX contacts_cn ON contacts USING btree (cn);


--
-- Name: id; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE INDEX id ON guestbook USING btree (id);


--
-- Name: telfort_001; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX telfort_001 ON telfort USING btree (tijd, type, nummer);


--
-- Name: telfort_002; Type: INDEX; Schema: public; Owner: mfvl; Tablespace: 
--

CREATE UNIQUE INDEX telfort_002 ON telfort USING btree (tijd, type, bedrag) WHERE ((type)::text = 'GPRS dataverkeer'::text);


SET search_path = pois, pg_catalog;

--
-- Name: del_flitspalen; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE del_flitspalen AS ON DELETE TO flitspalen DO INSTEAD DELETE FROM posten WHERE (posten.id = old.id);


--
-- Name: del_vergelijk; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE del_vergelijk AS ON DELETE TO "vergelijk poisupdate" DO INSTEAD DELETE FROM poisupdate WHERE (poisupdate.id = old.pu_id);


--
-- Name: gewijzigd_del; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE gewijzigd_del AS ON DELETE TO gewijzigd DO INSTEAD DELETE FROM posten WHERE (posten.id = old.id);


--
-- Name: lw_del; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE lw_del AS ON DELETE TO "laatste week" DO INSTEAD DELETE FROM posten WHERE (posten.id = old.id);


--
-- Name: upd_flitspalen; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_flitspalen AS ON UPDATE TO flitspalen DO INSTEAD NOTHING;


--
-- Name: upd_flitspalen_bidirectioneel; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_flitspalen_bidirectioneel AS ON UPDATE TO flitspalen WHERE (((new.bidirectioneel <> old.bidirectioneel) OR ((NOT (new.bidirectioneel IS NULL)) AND (old.bidirectioneel IS NULL))) OR ((new.bidirectioneel IS NULL) AND (NOT (old.bidirectioneel IS NULL)))) DO INSTEAD UPDATE posten p SET bidirectioneel = new.bidirectioneel WHERE (p.id = old.id);


--
-- Name: upd_flitspalen_land; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_flitspalen_land AS ON UPDATE TO flitspalen WHERE ((((new.land)::text <> (old.land)::text) OR ((NOT (new.land IS NULL)) AND (old.land IS NULL))) OR ((new.land IS NULL) AND (NOT (old.land IS NULL)))) DO INSTEAD UPDATE posten p SET land = new.land WHERE (p.id = old.id);


--
-- Name: upd_flitspalen_rel_id; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_flitspalen_rel_id AS ON UPDATE TO flitspalen WHERE (((new.rel_id <> old.rel_id) OR ((NOT (new.rel_id IS NULL)) AND (old.rel_id IS NULL))) OR ((new.rel_id IS NULL) AND (NOT (old.rel_id IS NULL)))) DO INSTEAD UPDATE posten p SET rel_id = new.rel_id WHERE (p.id = old.id);


--
-- Name: upd_flitspalen_richting; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_flitspalen_richting AS ON UPDATE TO flitspalen WHERE (((new.richting <> old.richting) OR ((NOT (new.richting IS NULL)) AND (old.richting IS NULL))) OR ((new.richting IS NULL) AND (NOT (old.richting IS NULL)))) DO INSTEAD UPDATE posten p SET richting = new.richting WHERE (p.id = old.id);


--
-- Name: upd_gewijzigd; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_gewijzigd AS ON UPDATE TO gewijzigd DO INSTEAD NOTHING;


--
-- Name: upd_gewijzigd_land; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_gewijzigd_land AS ON UPDATE TO gewijzigd WHERE ((((new.land)::text <> (old.land)::text) OR ((NOT (new.land IS NULL)) AND (old.land IS NULL))) OR ((new.land IS NULL) AND (NOT (old.land IS NULL)))) DO INSTEAD UPDATE posten p SET land = new.land WHERE (p.id = old.id);


--
-- Name: upd_lw; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_lw AS ON UPDATE TO "laatste week" DO INSTEAD NOTHING;


--
-- Name: upd_lw_dir; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_lw_dir AS ON UPDATE TO "laatste week" WHERE ((((new.richting <> old.richting) OR (new.bidirectioneel <> old.bidirectioneel)) OR ((NOT (new.richting IS NULL)) AND (old.richting IS NULL))) OR ((new.richting IS NULL) AND (NOT (old.richting IS NULL)))) DO INSTEAD UPDATE posten p SET richting = new.richting, bidirectioneel = new.bidirectioneel WHERE (p.id = old.id);


--
-- Name: upd_lw_land; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_lw_land AS ON UPDATE TO "laatste week" WHERE ((((new.land)::text <> (old.land)::text) OR ((NOT (new.land IS NULL)) AND (old.land IS NULL))) OR ((new.land IS NULL) AND (NOT (old.land IS NULL)))) DO INSTEAD UPDATE posten p SET land = new.land WHERE (p.id = old.id);


--
-- Name: upd_vergelijk; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_vergelijk AS ON UPDATE TO "vergelijk poisupdate" DO INSTEAD NOTHING;


--
-- Name: upd_vergelijk_relid; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_vergelijk_relid AS ON UPDATE TO "vergelijk poisupdate" WHERE (((new.rel_id <> old.rel_id) OR ((NOT (new.rel_id IS NULL)) AND (old.rel_id IS NULL))) OR ((new.rel_id IS NULL) AND (NOT (old.rel_id IS NULL)))) DO INSTEAD UPDATE posten p SET rel_id = new.rel_id WHERE (p.id = old.id);


--
-- Name: upd_vergelijk_richting; Type: RULE; Schema: pois; Owner: mfvl
--

CREATE RULE upd_vergelijk_richting AS ON UPDATE TO "vergelijk poisupdate" WHERE (((new.richting <> old.richting) OR ((NOT (new.richting IS NULL)) AND (old.richting IS NULL))) OR ((new.richting IS NULL) AND (NOT (old.richting IS NULL)))) DO INSTEAD UPDATE posten p SET richting = new.richting WHERE (p.id = old.id);


SET search_path = public, pg_catalog;

--
-- Name: adres_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE adres_del AS ON DELETE TO adres DO INSTEAD DELETE FROM naw n USING contacts c WHERE (((((((old.naam)::text = (c.naam)::text) AND (c.id = n.contact_id)) AND ((old.straat)::text = (n.straat)::text)) AND ((old.postcode)::text = (n.postcode)::text)) AND ((old.stad)::text = (n.stad)::text)) AND ((old.land)::text = (n.land)::text));


--
-- Name: adres_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE adres_ins AS ON INSERT TO adres DO INSTEAD INSERT INTO naw (contact_id, straat, postcode, stad, land, inmio, adr_type) SELECT contacts.id, new.straat, new.postcode, new.stad, new.land, new.inmio, new.adr_type FROM contacts WHERE ((contacts.naam)::text = (new.naam)::text);


--
-- Name: adres_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE adres_upd AS ON UPDATE TO adres DO INSTEAD NOTHING;


--
-- Name: adres_upd_adres; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE adres_upd_adres AS ON UPDATE TO adres WHERE (((((((old.straat)::text <> (new.straat)::text) OR ((old.postcode)::text <> (new.postcode)::text)) OR ((old.stad)::text <> (new.stad)::text)) OR ((old.land)::text <> (new.land)::text)) OR (old.inmio <> new.inmio)) OR ((old.adr_type)::text <> (new.adr_type)::text)) DO INSTEAD UPDATE naw n SET straat = new.straat, postcode = new.postcode, stad = new.stad, land = new.land, inmio = new.inmio, adr_type = new.adr_type FROM contacts c WHERE (((((((c.naam)::text = (old.naam)::text) AND (c.id = n.contact_id)) AND ((old.straat)::text = (n.straat)::text)) AND ((old.postcode)::text = (n.postcode)::text)) AND ((old.stad)::text = (n.stad)::text)) AND ((old.land)::text = (n.land)::text));


--
-- Name: categorie_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE categorie_del AS ON DELETE TO categorielijst DO INSTEAD DELETE FROM catcontact cc USING contacts co, categories ca WHERE (((((co.naam)::text = (old.naam)::text) AND (co.id = cc.contact_id)) AND ((ca.categorie)::text = (old.categorie)::text)) AND (ca.id = cc.cat_id));


--
-- Name: categorie_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE categorie_ins AS ON INSERT TO categorielijst DO INSTEAD INSERT INTO catcontact (contact_id, cat_id) SELECT (SELECT contacts.id FROM contacts WHERE ((contacts.naam)::text = (new.naam)::text)) AS contact_id, (SELECT categories.id FROM categories WHERE ((categories.categorie)::text = (new.categorie)::text)) AS cat_id;


--
-- Name: categorie_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE categorie_upd AS ON UPDATE TO categorielijst DO INSTEAD NOTHING;


--
-- Name: categorie_upd_categorie; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE categorie_upd_categorie AS ON UPDATE TO categorielijst WHERE ((old.categorie)::text <> (new.categorie)::text) DO INSTEAD UPDATE catcontact cc SET cat_id = ca1.id FROM contacts co, categories ca, categories ca1 WHERE (((((cc.cat_id = ca.id) AND (cc.contact_id = co.id)) AND ((ca.categorie)::text = (old.categorie)::text)) AND ((co.naam)::text = (old.naam)::text)) AND ((ca1.categorie)::text = (new.categorie)::text));


--
-- Name: contacts_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE contacts_del AS ON DELETE TO contacts WHERE (old.deleted = false) DO INSTEAD UPDATE contacts SET deleted = true WHERE (contacts.id = old.id);


--
-- Name: del_telnummer; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE del_telnummer AS ON DELETE TO telnummer DO INSTEAD DELETE FROM telephone t USING contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = t.contact_id)) AND ((t.number)::text = (old.number)::text));


--
-- Name: email_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_del AS ON DELETE TO email DO INSTEAD DELETE FROM mail m WHERE ((m.mailaddress)::text = (old.mailaddress)::text);


--
-- Name: email_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_ins AS ON INSERT TO email DO INSTEAD INSERT INTO mail (contact_id, mailaddress, type, priority) SELECT c.id, new.mailaddress, new.type, new.priority FROM contacts c WHERE ((c.naam)::text = (new.naam)::text);


--
-- Name: email_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_upd AS ON UPDATE TO email DO INSTEAD NOTHING;


--
-- Name: email_upd_mailaddress; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_upd_mailaddress AS ON UPDATE TO email WHERE ((old.mailaddress)::text <> (new.mailaddress)::text) DO INSTEAD UPDATE mail m SET mailaddress = new.mailaddress WHERE ((m.mailaddress)::text = (old.mailaddress)::text);


--
-- Name: email_upd_priority; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_upd_priority AS ON UPDATE TO email WHERE (((old.priority <> new.priority) OR ((old.priority IS NULL) AND (NOT (new.priority IS NULL)))) OR ((new.priority IS NULL) AND (NOT (old.priority IS NULL)))) DO INSTEAD UPDATE mail m SET priority = new.priority WHERE ((m.mailaddress)::text = (old.mailaddress)::text);


--
-- Name: email_upd_type; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE email_upd_type AS ON UPDATE TO email WHERE ((((old.type)::text <> (new.type)::text) OR ((old.type IS NULL) AND (NOT (new.type IS NULL)))) OR ((new.type IS NULL) AND (NOT (old.type IS NULL)))) DO INSTEAD UPDATE mail m SET type = new.type WHERE ((m.mailaddress)::text = (old.mailaddress)::text);


--
-- Name: faxnummer_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE faxnummer_del AS ON DELETE TO faxnummer DO INSTEAD DELETE FROM fax f USING contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = f.contact_id)) AND ((f.number)::text = (old.number)::text));


--
-- Name: faxnummer_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE faxnummer_upd AS ON UPDATE TO faxnummer DO INSTEAD NOTHING;


--
-- Name: faxnummer_upd_number; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE faxnummer_upd_number AS ON UPDATE TO faxnummer WHERE (((old.number)::text <> (new.number)::text) OR ((old.fax_type)::text <> (new.fax_type)::text)) DO INSTEAD UPDATE fax f SET number = new.number, fax_type = new.fax_type FROM contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = f.contact_id)) AND ((f.number)::text = (old.number)::text));


--
-- Name: insert_telnummer; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE insert_telnummer AS ON INSERT TO telnummer DO INSTEAD INSERT INTO telephone (number, contact_id, tel_type, list, prio) SELECT new.number, c.id, new.tel_type, new.list, bepaal_tel_prio((new.naam)::text, (new.tel_type)::text) AS bepaal_tel_prio FROM contacts c WHERE ((c.naam)::text = (new.naam)::text);


--
-- Name: invoer_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE invoer_ins AS ON INSERT TO invoer DO INSTEAD NOTHING;


--
-- Name: invoer_ins_company; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE invoer_ins_company AS ON INSERT TO invoer WHERE (((new.voornaam IS NULL) AND (new.achternaam IS NULL)) AND (NOT (new.company IS NULL))) DO INSTEAD INSERT INTO contacts (fileas, naam, cn, voornaam, voorletters, tussenvoegsel, achternaam, company, function, geboortedatum, geslacht, webpagina) VALUES (new.company, new.company, new.company, new.voornaam, new.voorletters, new.tussenvoegsel, new.achternaam, new.company, new.function, new.geboortedatum, new.geslacht, new.webpagina);


--
-- Name: invoer_ins_person; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE invoer_ins_person AS ON INSERT TO invoer WHERE (NOT ((new.voornaam IS NULL) OR (new.achternaam IS NULL))) DO INSTEAD INSERT INTO contacts (fileas, naam, cn, voornaam, voorletters, tussenvoegsel, achternaam, company, function, geboortedatum, geslacht, webpagina) VALUES (nonull_append_strings((((new.achternaam)::text || ', '::text) || (new.voornaam)::text), (new.tussenvoegsel)::text), ((nonull_append_strings((new.voornaam)::text, (new.tussenvoegsel)::text) || ' '::text) || (new.achternaam)::text), ((nonull_append_strings((new.voornaam)::text, (new.tussenvoegsel)::text) || ' '::text) || (new.achternaam)::text), new.voornaam, new.voorletters, new.tussenvoegsel, new.achternaam, new.company, new.function, new.geboortedatum, new.geslacht, new.webpagina);


--
-- Name: invoer_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE invoer_upd AS ON UPDATE TO invoer DO INSTEAD NOTHING;


--
-- Name: kerstkaart_del; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE kerstkaart_del AS ON DELETE TO kerstkaart DO INSTEAD DELETE FROM catcontact USING categories WHERE (((catcontact.contact_id = old.id) AND (catcontact.cat_id = categories.id)) AND ((categories.categorie)::text = 'kerstkaart'::text));


--
-- Name: kerstkaart_ins; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE kerstkaart_ins AS ON INSERT TO kerstkaart DO INSTEAD NOTHING;


--
-- Name: kerstkaart_ins_id; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE kerstkaart_ins_id AS ON INSERT TO kerstkaart WHERE (NOT (new.id IS NULL)) DO INSTEAD INSERT INTO catcontact (contact_id, cat_id) SELECT new.id, categories.id FROM categories WHERE ((categories.categorie)::text = 'kerstkaart'::text);


--
-- Name: login1_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE login1_upd AS ON UPDATE TO login1 DO INSTEAD NOTHING;


--
-- Name: login1_upd_password; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE login1_upd_password AS ON UPDATE TO login1 WHERE ((((old.uid)::text = (new.uid)::text) AND ((old.realm)::text = (new.realm)::text)) AND ((old.password)::text <> (new.password)::text)) DO INSTEAD UPDATE apacherealm SET password = new.password WHERE (((apacherealm.uid)::text = (old.uid)::text) AND ((apacherealm.realm)::text = (old.realm)::text));


--
-- Name: login_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE login_upd AS ON UPDATE TO login DO INSTEAD NOTHING;


--
-- Name: login_upd_password; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE login_upd_password AS ON UPDATE TO login WHERE ((((old.password IS NULL) AND (NOT (new.password IS NULL))) OR ((new.password IS NULL) AND (NOT (old.password IS NULL)))) OR ((old.password)::text <> (new.password)::text)) DO INSTEAD UPDATE contacts SET password = new.password WHERE ((contacts.uid)::text = (old.uid)::text);


--
-- Name: match_l_upd; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE match_l_upd AS ON UPDATE TO match_linkedin DO INSTEAD NOTHING;


--
-- Name: match_l_upd_contact; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE match_l_upd_contact AS ON UPDATE TO match_linkedin WHERE (((((old.company)::text <> (new.company)::text) OR ((old.company IS NULL) AND (NOT (new.company IS NULL)))) OR ((new.company IS NULL) AND (NOT (old.company IS NULL)))) OR ((((old.function)::text <> (new.function)::text) OR ((old.function IS NULL) AND (NOT (new.function IS NULL)))) OR ((new.function IS NULL) AND (NOT (old.function IS NULL))))) DO INSTEAD UPDATE contacts c SET company = new.company, function = new.function WHERE ((c.naam)::text = (old.naam)::text);


--
-- Name: upd_miolijst; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_miolijst AS ON UPDATE TO miolijst DO INSTEAD NOTHING;


--
-- Name: upd_miolijst_inmio; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_miolijst_inmio AS ON UPDATE TO miolijst WHERE (((old.inmio <> new.inmio) OR ((old.inmio IS NULL) AND (NOT (new.inmio IS NULL)))) OR ((new.inmio IS NULL) AND (NOT (old.inmio IS NULL)))) DO INSTEAD UPDATE naw SET inmio = new.inmio WHERE (naw.id = old.id);


--
-- Name: upd_miolijst_mioicon; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_miolijst_mioicon AS ON UPDATE TO miolijst WHERE (((old.mioicon <> new.mioicon) OR ((old.mioicon IS NULL) AND (NOT (new.mioicon IS NULL)))) OR ((new.mioicon IS NULL) AND (NOT (old.mioicon IS NULL)))) DO INSTEAD UPDATE naw SET mioicon = new.mioicon WHERE (naw.id = old.id);


--
-- Name: upd_telnummer; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_telnummer AS ON UPDATE TO telnummer DO INSTEAD NOTHING;


--
-- Name: upd_telnummer1; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_telnummer1 AS ON UPDATE TO telnummer WHERE ((old.number)::text <> (new.number)::text) DO INSTEAD UPDATE telephone t SET number = new.number FROM contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = t.contact_id)) AND ((t.number)::text = (old.number)::text));


--
-- Name: upd_telnummer2; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_telnummer2 AS ON UPDATE TO telnummer WHERE ((old.tel_type)::text <> (new.tel_type)::text) DO INSTEAD UPDATE telephone t SET tel_type = new.tel_type FROM contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = t.contact_id)) AND ((t.number)::text = (old.number)::text));


--
-- Name: upd_telnummer3; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_telnummer3 AS ON UPDATE TO telnummer WHERE (((old.prio <> new.prio) OR ((old.prio IS NULL) AND (NOT (new.prio IS NULL)))) OR ((new.prio IS NULL) AND (NOT (old.prio IS NULL)))) DO INSTEAD UPDATE telephone t SET prio = new.prio FROM contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = t.contact_id)) AND ((t.number)::text = (old.number)::text));


--
-- Name: upd_telnummer4; Type: RULE; Schema: public; Owner: mfvl
--

CREATE RULE upd_telnummer4 AS ON UPDATE TO telnummer WHERE (((old.list <> new.list) OR ((old.list IS NULL) AND (NOT (new.list IS NULL)))) OR ((new.list IS NULL) AND (NOT (old.list IS NULL)))) DO INSTEAD UPDATE telephone t SET list = new.list FROM contacts c WHERE ((((c.naam)::text = (old.naam)::text) AND (c.id = t.contact_id)) AND ((t.number)::text = (old.number)::text));


SET search_path = pois, pg_catalog;

--
-- Name: create_poi; Type: TRIGGER; Schema: pois; Owner: mfvl
--

CREATE TRIGGER create_poi
    BEFORE INSERT ON posten
    FOR EACH ROW
    EXECUTE PROCEDURE create_poi();


--
-- Name: maaknaam; Type: TRIGGER; Schema: pois; Owner: mfvl
--

CREATE TRIGGER maaknaam
    BEFORE INSERT OR UPDATE ON temp
    FOR EACH ROW
    EXECUTE PROCEDURE maaknaam();


--
-- Name: update_poi; Type: TRIGGER; Schema: pois; Owner: mfvl
--

CREATE TRIGGER update_poi
    BEFORE UPDATE ON posten
    FOR EACH ROW
    EXECUTE PROCEDURE update_poi();


SET search_path = public, pg_catalog;

--
-- Name: af_attr_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_del
    BEFORE DELETE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_attr_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_attr_upd
    BEFORE INSERT OR UPDATE ON attr
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_cat_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_del
    BEFORE DELETE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_cat_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_cat_upd
    BEFORE INSERT OR UPDATE ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_contact_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_del
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_del();


--
-- Name: af_contact_updtime; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_contact_updtime
    BEFORE INSERT OR UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE af_contact_updtime();


--
-- Name: af_fax_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_del
    BEFORE DELETE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_fax_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_fax_upd
    BEFORE INSERT OR UPDATE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_mail_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_del
    BEFORE DELETE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_mail_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_mail_upd
    BEFORE INSERT OR UPDATE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_naw_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_del
    BEFORE DELETE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_naw_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_naw_upd
    BEFORE INSERT OR UPDATE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_rel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_del
    BEFORE DELETE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_rel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_rel_upd
    BEFORE INSERT OR UPDATE ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: af_tel_del; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_del
    BEFORE DELETE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime1();


--
-- Name: af_tel_upd; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER af_tel_upd
    BEFORE INSERT OR UPDATE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE af_updtime();


--
-- Name: insert_cat; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_cat
    BEFORE INSERT ON catcontact
    FOR EACH ROW
    EXECUTE PROCEDURE insert_cat();


--
-- Name: insert_fax; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_fax
    BEFORE INSERT ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE insert_fax();


--
-- Name: insert_mail; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_mail
    BEFORE INSERT ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE insert_mail();


--
-- Name: insert_naw; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_naw
    BEFORE INSERT ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE insert_naw();


--
-- Name: insert_rek; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_rek
    BEFORE INSERT ON rekeningnummer
    FOR EACH ROW
    EXECUTE PROCEDURE insert_rek();


--
-- Name: insert_rel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_rel
    BEFORE INSERT ON relaties
    FOR EACH ROW
    EXECUTE PROCEDURE insert_rel();


--
-- Name: insert_tel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER insert_tel
    BEFORE INSERT ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE insert_tel();


--
-- Name: ldap_create; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_create
    AFTER INSERT ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_create();


--
-- Name: ldap_delete; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_delete
    BEFORE DELETE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_delete();


--
-- Name: ldap_update; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER ldap_update
    AFTER UPDATE ON contacts
    FOR EACH ROW
    EXECUTE PROCEDURE ldap_update();


--
-- Name: upd_naw; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER upd_naw
    BEFORE UPDATE ON naw
    FOR EACH ROW
    EXECUTE PROCEDURE upd_naw();


--
-- Name: update_fax; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_fax
    BEFORE UPDATE ON fax
    FOR EACH ROW
    EXECUTE PROCEDURE update_number();


--
-- Name: update_mail; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_mail
    BEFORE UPDATE ON mail
    FOR EACH ROW
    EXECUTE PROCEDURE update_mail();


--
-- Name: update_tel; Type: TRIGGER; Schema: public; Owner: mfvl
--

CREATE TRIGGER update_tel
    BEFORE UPDATE ON telephone
    FOR EACH ROW
    EXECUTE PROCEDURE update_number();


SET search_path = pois, pg_catalog;

--
-- Name: posten_file_fkey; Type: FK CONSTRAINT; Schema: pois; Owner: mfvl
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT posten_file_fkey FOREIGN KEY (file) REFERENCES inputfiles(naam);


--
-- Name: rel_id; Type: FK CONSTRAINT; Schema: pois; Owner: mfvl
--

ALTER TABLE ONLY posten
    ADD CONSTRAINT rel_id FOREIGN KEY (rel_id) REFERENCES posten(id);


SET search_path = public, pg_catalog;

--
-- Name: adr_type; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT adr_type FOREIGN KEY (adr_type) REFERENCES adr_types(adr_type);


--
-- Name: aspect_aspect; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY videos
    ADD CONSTRAINT aspect_aspect FOREIGN KEY (aspect) REFERENCES video_aspect(aspect);


--
-- Name: catcontact_cat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_cat_id_fkey FOREIGN KEY (cat_id) REFERENCES categories(id);


--
-- Name: catcontact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY catcontact
    ADD CONSTRAINT catcontact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: fax_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: fax_fax_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY fax
    ADD CONSTRAINT fax_fax_type_fkey FOREIGN KEY (fax_type) REFERENCES tel_types(tel_type);


--
-- Name: ldap_attr_mappings_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_attr_mappings
    ADD CONSTRAINT ldap_attr_mappings_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entries_oc_map_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entries
    ADD CONSTRAINT ldap_entries_oc_map_id_fkey FOREIGN KEY (oc_map_id) REFERENCES ldap_oc_mappings(id);


--
-- Name: ldap_entry_objclasses_entry_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY ldap_entry_objclasses
    ADD CONSTRAINT ldap_entry_objclasses_entry_id_fkey FOREIGN KEY (entry_id) REFERENCES ldap_entries(id);


--
-- Name: mail_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: mail_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY mail
    ADD CONSTRAINT mail_type_fkey FOREIGN KEY (type) REFERENCES adr_types(adr_type);


--
-- Name: mp3cd_mp3id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY mp3cd
    ADD CONSTRAINT mp3cd_mp3id_fkey FOREIGN KEY (mp3id) REFERENCES mp3(id);


--
-- Name: naw_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY naw
    ADD CONSTRAINT naw_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: rekeningnummer_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY rekeningnummer
    ADD CONSTRAINT rekeningnummer_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: relaties_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: relaties_relatie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_fkey FOREIGN KEY (relatie) REFERENCES relatievormen(relatie);


--
-- Name: relaties_relatie_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY relaties
    ADD CONSTRAINT relaties_relatie_id_fkey FOREIGN KEY (relatie_id) REFERENCES contacts(id);


--
-- Name: telephone_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id);


--
-- Name: telephone_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: mfvl
--

ALTER TABLE ONLY telephone
    ADD CONSTRAINT telephone_type_fkey FOREIGN KEY (tel_type) REFERENCES tel_types(tel_type);


--
-- Name: pois; Type: ACL; Schema: -; Owner: mfvl
--

REVOKE ALL ON SCHEMA pois FROM PUBLIC;
REVOKE ALL ON SCHEMA pois FROM mfvl;
GRANT ALL ON SCHEMA pois TO mfvl;
GRANT ALL ON SCHEMA pois TO httpd;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;
GRANT ALL ON SCHEMA public TO httpd;


SET search_path = pois, pg_catalog;

--
-- Name: posten; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE posten FROM PUBLIC;
REVOKE ALL ON TABLE posten FROM mfvl;
GRANT ALL ON TABLE posten TO mfvl;
GRANT ALL ON TABLE posten TO httpd;


--
-- Name: cameratypes; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE cameratypes FROM PUBLIC;
REVOKE ALL ON TABLE cameratypes FROM mfvl;
GRANT ALL ON TABLE cameratypes TO mfvl;
GRANT ALL ON TABLE cameratypes TO httpd;


--
-- Name: close50; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE close50 FROM PUBLIC;
REVOKE ALL ON TABLE close50 FROM mfvl;
GRANT ALL ON TABLE close50 TO mfvl;
GRANT ALL ON TABLE close50 TO httpd;


--
-- Name: inputfiles; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE inputfiles FROM PUBLIC;
REVOKE ALL ON TABLE inputfiles FROM mfvl;
GRANT ALL ON TABLE inputfiles TO mfvl;
GRANT ALL ON TABLE inputfiles TO httpd;


--
-- Name: disthelp; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE disthelp FROM PUBLIC;
REVOKE ALL ON TABLE disthelp FROM mfvl;
GRANT ALL ON TABLE disthelp TO mfvl;
GRANT ALL ON TABLE disthelp TO httpd;


--
-- Name: disthelp1; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE disthelp1 FROM PUBLIC;
REVOKE ALL ON TABLE disthelp1 FROM mfvl;
GRANT ALL ON TABLE disthelp1 TO mfvl;
GRANT ALL ON TABLE disthelp1 TO httpd;


--
-- Name: eigen; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE eigen FROM PUBLIC;
REVOKE ALL ON TABLE eigen FROM mfvl;
GRANT ALL ON TABLE eigen TO mfvl;
GRANT ALL ON TABLE eigen TO httpd;


--
-- Name: flitspalen; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE flitspalen FROM PUBLIC;
REVOKE ALL ON TABLE flitspalen FROM mfvl;
GRANT ALL ON TABLE flitspalen TO mfvl;
GRANT ALL ON TABLE flitspalen TO httpd;


--
-- Name: gewijzigd; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE gewijzigd FROM PUBLIC;
REVOKE ALL ON TABLE gewijzigd FROM mfvl;
GRANT ALL ON TABLE gewijzigd TO mfvl;
GRANT ALL ON TABLE gewijzigd TO httpd WITH GRANT OPTION;


--
-- Name: inputfiles_id_seq; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON SEQUENCE inputfiles_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE inputfiles_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE inputfiles_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE inputfiles_id_seq TO httpd;


--
-- Name: laatste week; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE "laatste week" FROM PUBLIC;
REVOKE ALL ON TABLE "laatste week" FROM mfvl;
GRANT ALL ON TABLE "laatste week" TO mfvl;
GRANT ALL ON TABLE "laatste week" TO httpd WITH GRANT OPTION;


--
-- Name: poisupdate; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE poisupdate FROM PUBLIC;
REVOKE ALL ON TABLE poisupdate FROM mfvl;
GRANT ALL ON TABLE poisupdate TO mfvl;
GRANT ALL ON TABLE poisupdate TO httpd;


--
-- Name: posten_id_seq; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON SEQUENCE posten_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE posten_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE posten_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE posten_id_seq TO httpd;


--
-- Name: temp; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE temp FROM PUBLIC;
REVOKE ALL ON TABLE temp FROM mfvl;
GRANT ALL ON TABLE temp TO mfvl;
GRANT ALL ON TABLE temp TO httpd;


--
-- Name: woonwerk; Type: ACL; Schema: pois; Owner: mfvl
--

REVOKE ALL ON TABLE woonwerk FROM PUBLIC;
REVOKE ALL ON TABLE woonwerk FROM mfvl;
GRANT SELECT ON TABLE woonwerk TO httpd;


SET search_path = public, pg_catalog;

--
-- Name: adr_types; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE adr_types FROM PUBLIC;
REVOKE ALL ON TABLE adr_types FROM mfvl;
GRANT ALL ON TABLE adr_types TO mfvl;
GRANT ALL ON TABLE adr_types TO httpd;
GRANT ALL ON TABLE adr_types TO "Admin";


--
-- Name: attr; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE attr FROM PUBLIC;
REVOKE ALL ON TABLE attr FROM mfvl;
GRANT ALL ON TABLE attr TO mfvl;
GRANT ALL ON TABLE attr TO httpd;


--
-- Name: attr_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE attr_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE attr_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE attr_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE attr_id_seq TO httpd;


--
-- Name: contacts; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE contacts FROM PUBLIC;
REVOKE ALL ON TABLE contacts FROM mfvl;
GRANT ALL ON TABLE contacts TO httpd;
GRANT ALL ON TABLE contacts TO "Admin";


--
-- Name: naw; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE naw FROM PUBLIC;
REVOKE ALL ON TABLE naw FROM mfvl;
GRANT ALL ON TABLE naw TO mfvl;
GRANT ALL ON TABLE naw TO httpd;
GRANT ALL ON TABLE naw TO "Admin";


--
-- Name: catcontact; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE catcontact FROM PUBLIC;
REVOKE ALL ON TABLE catcontact FROM mfvl;
GRANT ALL ON TABLE catcontact TO mfvl;
GRANT ALL ON TABLE catcontact TO httpd;
GRANT ALL ON TABLE catcontact TO "Admin";


--
-- Name: categories; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE categories FROM PUBLIC;
REVOKE ALL ON TABLE categories FROM mfvl;
GRANT ALL ON TABLE categories TO mfvl;
GRANT ALL ON TABLE categories TO httpd;
GRANT ALL ON TABLE categories TO "Admin";


--
-- Name: categories_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE categories_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE categories_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE categories_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE categories_id_seq TO httpd;


--
-- Name: chansons; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE chansons FROM PUBLIC;
REVOKE ALL ON TABLE chansons FROM mfvl;
GRANT ALL ON TABLE chansons TO mfvl;
GRANT ALL ON TABLE chansons TO httpd;


--
-- Name: chansons_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE chansons_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE chansons_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE chansons_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE chansons_id_seq TO httpd;


--
-- Name: contacts_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE contacts_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contacts_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE contacts_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE contacts_id_seq TO httpd;


--
-- Name: dankbetuigingen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE dankbetuigingen FROM PUBLIC;
REVOKE ALL ON TABLE dankbetuigingen FROM mfvl;
GRANT ALL ON TABLE dankbetuigingen TO mfvl;
GRANT ALL ON TABLE dankbetuigingen TO httpd;


--
-- Name: videos; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE videos FROM PUBLIC;
REVOKE ALL ON TABLE videos FROM mfvl;
GRANT ALL ON TABLE videos TO mfvl;
GRANT SELECT ON TABLE videos TO httpd;


--
-- Name: mail; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE mail FROM PUBLIC;
REVOKE ALL ON TABLE mail FROM mfvl;
GRANT ALL ON TABLE mail TO mfvl;
GRANT ALL ON TABLE mail TO httpd;
GRANT ALL ON TABLE mail TO "Admin";


--
-- Name: email; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE email FROM PUBLIC;
REVOKE ALL ON TABLE email FROM mfvl;
GRANT ALL ON TABLE email TO mfvl;
GRANT ALL ON TABLE email TO httpd;


--
-- Name: fax; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE fax FROM PUBLIC;
REVOKE ALL ON TABLE fax FROM mfvl;
GRANT ALL ON TABLE fax TO mfvl;
GRANT ALL ON TABLE fax TO httpd;
GRANT ALL ON TABLE fax TO "Admin";


--
-- Name: faxnummer; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE faxnummer FROM PUBLIC;
REVOKE ALL ON TABLE faxnummer FROM mfvl;
GRANT ALL ON TABLE faxnummer TO mfvl;
GRANT ALL ON TABLE faxnummer TO httpd;


--
-- Name: kerstkaart; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE kerstkaart FROM PUBLIC;
REVOKE ALL ON TABLE kerstkaart FROM mfvl;
GRANT ALL ON TABLE kerstkaart TO mfvl;
GRANT ALL ON TABLE kerstkaart TO httpd;


--
-- Name: ldap_attr_mappings; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_attr_mappings FROM PUBLIC;
REVOKE ALL ON TABLE ldap_attr_mappings FROM mfvl;
GRANT ALL ON TABLE ldap_attr_mappings TO mfvl;
GRANT ALL ON TABLE ldap_attr_mappings TO httpd;


--
-- Name: ldap_attr_mappings_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_attr_mappings_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_attr_mappings_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_attr_mappings_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_attr_mappings_id_seq TO httpd;


--
-- Name: ldap_entries; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_entries FROM PUBLIC;
REVOKE ALL ON TABLE ldap_entries FROM mfvl;
GRANT ALL ON TABLE ldap_entries TO mfvl;
GRANT ALL ON TABLE ldap_entries TO httpd;


--
-- Name: ldap_entries_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_entries_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_entries_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_entries_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_entries_id_seq TO httpd;


--
-- Name: ldap_entry_objclasses; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_entry_objclasses FROM PUBLIC;
REVOKE ALL ON TABLE ldap_entry_objclasses FROM mfvl;
GRANT ALL ON TABLE ldap_entry_objclasses TO mfvl;
GRANT ALL ON TABLE ldap_entry_objclasses TO httpd;


--
-- Name: ldap_oc_mappings; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE ldap_oc_mappings FROM PUBLIC;
REVOKE ALL ON TABLE ldap_oc_mappings FROM mfvl;
GRANT ALL ON TABLE ldap_oc_mappings TO mfvl;
GRANT ALL ON TABLE ldap_oc_mappings TO httpd;


--
-- Name: ldap_oc_mappings_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE ldap_oc_mappings_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ldap_oc_mappings_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE ldap_oc_mappings_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE ldap_oc_mappings_id_seq TO httpd;


--
-- Name: rekeningnummer; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE rekeningnummer FROM PUBLIC;
REVOKE ALL ON TABLE rekeningnummer FROM mfvl;
GRANT ALL ON TABLE rekeningnummer TO mfvl;
GRANT ALL ON TABLE rekeningnummer TO httpd;
GRANT ALL ON TABLE rekeningnummer TO "Admin";


--
-- Name: relaties; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE relaties FROM PUBLIC;
REVOKE ALL ON TABLE relaties FROM mfvl;
GRANT ALL ON TABLE relaties TO mfvl;
GRANT ALL ON TABLE relaties TO httpd;
GRANT ALL ON TABLE relaties TO "Admin";


--
-- Name: relatievormen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE relatievormen FROM PUBLIC;
REVOKE ALL ON TABLE relatievormen FROM mfvl;
GRANT ALL ON TABLE relatievormen TO mfvl;
GRANT ALL ON TABLE relatievormen TO httpd;
GRANT ALL ON TABLE relatievormen TO "Admin";


--
-- Name: sendmailmta; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmta FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmta FROM mfvl;
GRANT ALL ON TABLE sendmailmta TO mfvl;
GRANT ALL ON TABLE sendmailmta TO httpd;


--
-- Name: sendmailmta_id_seq; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON SEQUENCE sendmailmta_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sendmailmta_id_seq FROM mfvl;
GRANT ALL ON SEQUENCE sendmailmta_id_seq TO mfvl;
GRANT SELECT,UPDATE ON SEQUENCE sendmailmta_id_seq TO httpd;


--
-- Name: sendmailmtaalias; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaalias FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaalias FROM mfvl;
GRANT ALL ON TABLE sendmailmtaalias TO mfvl;
GRANT ALL ON TABLE sendmailmtaalias TO httpd;


--
-- Name: sendmailmtaaliasobject; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaaliasobject FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaaliasobject FROM mfvl;
GRANT ALL ON TABLE sendmailmtaaliasobject TO mfvl;
GRANT ALL ON TABLE sendmailmtaaliasobject TO httpd;


--
-- Name: sendmailmtaclass; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtaclass FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtaclass FROM mfvl;
GRANT ALL ON TABLE sendmailmtaclass TO mfvl;
GRANT ALL ON TABLE sendmailmtaclass TO httpd;


--
-- Name: sendmailmtamap; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtamap FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtamap FROM mfvl;
GRANT ALL ON TABLE sendmailmtamap TO mfvl;
GRANT ALL ON TABLE sendmailmtamap TO httpd;


--
-- Name: sendmailmtamapobject; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE sendmailmtamapobject FROM PUBLIC;
REVOKE ALL ON TABLE sendmailmtamapobject FROM mfvl;
GRANT ALL ON TABLE sendmailmtamapobject TO mfvl;
GRANT ALL ON TABLE sendmailmtamapobject TO httpd;


--
-- Name: tel_types; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE tel_types FROM PUBLIC;
REVOKE ALL ON TABLE tel_types FROM mfvl;
GRANT ALL ON TABLE tel_types TO mfvl;
GRANT ALL ON TABLE tel_types TO httpd;
GRANT ALL ON TABLE tel_types TO "Admin";


--
-- Name: telephone; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telephone FROM PUBLIC;
REVOKE ALL ON TABLE telephone FROM mfvl;
GRANT ALL ON TABLE telephone TO mfvl;
GRANT ALL ON TABLE telephone TO httpd;
GRANT ALL ON TABLE telephone TO "Admin";


--
-- Name: telfort; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort FROM PUBLIC;
REVOKE ALL ON TABLE telfort FROM mfvl;
GRANT ALL ON TABLE telfort TO mfvl;
GRANT ALL ON TABLE telfort TO httpd;


--
-- Name: telfort_namen; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_namen FROM PUBLIC;
REVOKE ALL ON TABLE telfort_namen FROM mfvl;
GRANT ALL ON TABLE telfort_namen TO mfvl;
GRANT ALL ON TABLE telfort_namen TO httpd;


--
-- Name: telfort_vertaal; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_vertaal FROM PUBLIC;
REVOKE ALL ON TABLE telfort_vertaal FROM mfvl;
GRANT ALL ON TABLE telfort_vertaal TO mfvl;
GRANT ALL ON TABLE telfort_vertaal TO httpd;


--
-- Name: telfort_zakelijk; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE telfort_zakelijk FROM PUBLIC;
REVOKE ALL ON TABLE telfort_zakelijk FROM mfvl;
GRANT ALL ON TABLE telfort_zakelijk TO mfvl;
GRANT ALL ON TABLE telfort_zakelijk TO httpd;


--
-- Name: tijdelijk; Type: ACL; Schema: public; Owner: mfvl
--

REVOKE ALL ON TABLE tijdelijk FROM PUBLIC;
REVOKE ALL ON TABLE tijdelijk FROM mfvl;
GRANT ALL ON TABLE tijdelijk TO mfvl;
GRANT ALL ON TABLE tijdelijk TO httpd;


--
-- PostgreSQL database dump complete
--

